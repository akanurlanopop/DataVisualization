
(function() {
    jQuery.fn.dv = function(source) {
        return this.each(function() {                
            var p = new Processing(this, dv);
            
            var graph = new p.Graph(this, jQuery);
            graph.setXML(source);
            graph.draw();
        });
    };			
    
    jQuery.fn.dvFromUrl = function(url) {
        return this.each(function() {
            var p = new Processing(this, dv);
            
            var graph = new p.Graph(this, jQuery);
            graph.setXMLFromUrl(url);
            graph.draw();
        });
    };
    
})(jQuery);

jQuery(function() {
    jQuery('head').append('<meta http-equiv="X-UA-Compatible" content="IE=9" >');
});

// this code was autogenerated from PJS
var dv = function($p) {
    var Drawable = (function() {
        function Drawable() {
            throw 'Unable to create the interface';
        }
        Drawable.$isInterface = true;
        Drawable.$methods = ['draw', 'preprocessing', 'invertY', 'getTooltip'];
        return Drawable;
    })();
    $p.Drawable = Drawable;
    var Chart = (function() {
        function Chart() {
            var $this_1 = this;
            function $superCstr(){
                $p.extendClassChain($this_1)
                }
            $this_1.layout = null;
            $p.defineProperty($this_1, 'RADIAL_CHART', {
                get: function(){
                    return Chart.RADIAL_CHART
                    }, 
                set: function(val){
                    Chart.RADIAL_CHART = val
                    }
                });
        $p.defineProperty($this_1, 'VERTICAL_CHART', {
            get: function(){
                return Chart.VERTICAL_CHART
                }, 
            set: function(val){
                Chart.VERTICAL_CHART = val
                }
            });
    $p.defineProperty($this_1, 'HORIZONTAL_CHART', {
        get: function(){
            return Chart.HORIZONTAL_CHART
            }, 
        set: function(val){
            Chart.HORIZONTAL_CHART = val
            }
        });
    $this_1.series = null;
    $this_1.parameters = null;
    $this_1.type =  0;
    function setLayout$1(layout) {
        $this_1.layout = layout;
    }
    $p.addMethod($this_1, 'setLayout', setLayout$1);
    function getType$0() {
        return $this_1.type;
    }
    $p.addMethod($this_1, 'getType', getType$0);
    function seriesQty$0() {
        return $this_1.series.length;
    }
    $p.addMethod($this_1, 'seriesQty', seriesQty$0);
    function seriesLength$0() {
        return $this_1.series[$this_1.series.length - 1].getValues().length;
    }
    $p.addMethod($this_1, 'seriesLength', seriesLength$0);
    function getSeries$1(i) {
        return $this_1.series[i];
    }
    $p.addMethod($this_1, 'getSeries', getSeries$1);
    function setSeries$2(i, s) {
        $this_1.series[i] = s;
    }
    $p.addMethod($this_1, 'setSeries', setSeries$2);
    function setPoints$2(i, points) {
        $this_1.series[i].setPoints(points);
    }
    $p.addMethod($this_1, 'setPoints', setPoints$2);
    function getParameters$0() {
        return $this_1.parameters;
    }
    $p.addMethod($this_1, 'getParameters', getParameters$0);
    function getParameter$1(key) {
        return $this_1.parameters.get(key);
    }
    $p.addMethod($this_1, 'getParameter', getParameter$1);
    function drawTooltip$5(x, y, width, height, labelText) {
        $p.textAlign($p.LEFT);
        $p.fill(255, 255, 255);

        $p.stroke(0);
        $p.rect(x, y, width, height);
        $p.fill(0);
        $p.text(labelText, x + 10, y + Graph.theme.get("tooltip.textsize") + 5);
    }
    $p.addMethod($this_1, 'drawTooltip', drawTooltip$5);
    function $constr() {
        $superCstr();
    }
    $constr.apply(null, arguments);
}
$p.extendInterfaceMembers(Chart, Drawable);
Chart.RADIAL_CHART =  0;
Chart.VERTICAL_CHART =  1;
Chart.HORIZONTAL_CHART =  2;
Chart.$interfaces = [Drawable];
return Chart;
})();
$p.Chart = Chart;
var Zoomable = (function() {
    function Zoomable() {
        throw 'Unable to create the interface';
    }
    Zoomable.$isInterface = true;
    Zoomable.$methods = ['zoom'];
    return Zoomable;
})();
$p.Zoomable = Zoomable;
var Axis = (function() {
    function Axis() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.layout = null;
        $this_1.series = null;
        $this_1.parameters = null;
        $this_1.labels = null;
        $this_1.orientation = null;
        $this_1.title = null;
        $this_1.pp =  0;
        $this_1.canvasWidth =  0;
        function setLayout$1(layout) {
            $this_1.layout = layout;
        }
        $p.addMethod($this_1, 'setLayout', setLayout$1);
        function draw$0() {
            $p.pushMatrix();
            $p.pushStyle();

            $p.textSize(Graph.theme.get("axis.textsize"));

            if ($p.__equals($this_1.orientation,"y")) {
                $this_1.$self.drawY();
            } else {
                $this_1.$self.drawX();
            }

            $p.popMatrix();
            $p.popStyle();
        }
        $p.addMethod($this_1, 'draw', draw$0);
        function drawX$0() {
            var points =   ($this_1.series.getPoints()).clone();
            var length =  points.get("length");
            $p.stroke(125);

            $p.textAlign($p.CENTER);

            var zoomCoeficient =  Graph.zoomCoeficient;

            for (var i =  0;  i < length;  i++) {
                var x1 =  points.get($p.str(i) + ".x") - Graph.layout.getX();
                x1 *= zoomCoeficient;
                x1 += Graph.layout.getX();
                x1 -= Graph.currentPosition;
                points.put($p.str(i) + ".x", x1);
            }

            var xMax =  Graph.layout.getX() + Graph.layout.getWidth();
            var xMin =  Graph.layout.getX();

            var delimeter =  1;

            if (Graph.attributes.containsKey("zoom") && $p.__equals(Graph.attributes.get("zoom"),"1")) {
                var textWidthAverage =  0;

                for (var i =  0;  i < $this_1.labels.length;  i++) {
                    textWidthAverage += Graph.textWidth($this_1.labels[i]);
                }

                textWidthAverage /= $this_1.labels.length - 1;
                var colWidth =  $this_1.layout.getWidth() * Graph.zoomCoeficient / $this_1.labels.length;

                while (delimeter * colWidth / textWidthAverage < 2) {
                    delimeter *= 2;
                }
            }

            var addY =  ($p.width * $p.height / Graph.averageAreaSize);

            for (var i =  0;  i < length;  i++) {
                var x =  points.get($p.str(i) + ".x");
                if (x > xMax) {
                    break;
                } else if (x < xMin) {
                    continue;
                }
                var y =  points.get($p.str(i) + ".y");

                $p.line(x, y, x, y + 5 + addY);
            }

            addY = 5 + addY + Graph.theme.get("axis.textsize");

            for (var i =  0;  i < $this_1.labels.length;  i += delimeter) {
                var x =  points.get($p.str(i) + ".x");
                if (x > xMax) {
                    break;
                } else if (x < xMin) {
                    continue;
                }
                var y =  points.get($p.str(i) + ".y");

                $p.text($this_1.labels[i], x + $this_1.pp, y + addY );
            }

            addY += Graph.theme.get("axis.textsize")+10;

            {
                var x =  $this_1.layout.getX();
                var y =  $this_1.layout.getY();
                var axisWidth =  $this_1.layout.getWidth();
                var axisHeight =  $this_1.layout.getHeight();

                var posX =  x + axisWidth / 2;
                var posY =  y + axisHeight / 2;

                $p.textAlign($p.CENTER);
                $p.text($this_1.title, posX, $this_1.layout.getY() + addY);
                $p.textAlign($p.LEFT);
            }

            $p.stroke(0);
        }
        $p.addMethod($this_1, 'drawX', drawX$0);
        function drawY$0() {
            var points =  $this_1.series.getPoints();
            var length =  points.get("length");
            $p.stroke(125);
            $p.strokeWeight(1);
            $p.textAlign($p.RIGHT);

            for (var i =  0;  i < length;  i++) {
                var x =  points.get($p.str(i) + ".x");
                var y =  points.get($p.str(i) + ".y");

                $p.line(x - 5, y, x + $this_1.canvasWidth, y);
            }

            var maxTextWidth =  0;

            for (var i =  0;  i < $this_1.labels.length;  i++) {
                var x =  points.get($p.str(i) + ".x");
                var y =  points.get($p.str(i) + ".y");

                $p.text($this_1.labels[i], x - 10, y + 5);

                maxTextWidth = Graph.textWidth($this_1.labels[i]) > maxTextWidth? Graph.textWidth($this_1.labels[i]) : maxTextWidth;
            }

            {
                var x =  $this_1.layout.getX() + $this_1.layout.getWidth() - maxTextWidth - 20;
                var y =  $this_1.layout.getY();
                var axisHeight =  $this_1.layout.getHeight();

                var posY =  y + axisHeight / 2;

                $p.pushMatrix();
                $p.translate(x, posY);
                $p.rotate(-$p.PI / 2);
                $p.textAlign($p.CENTER);

                $p.text($this_1.title, 0, 0);

                $p.textAlign($p.LEFT);
                $p.popMatrix();
            }

            $p.stroke(0);
        }
        $p.addMethod($this_1, 'drawY', drawY$0);
        function preprocessing$1(layoutParameters) {
            if ($p.__equals($this_1.orientation,"y")) {
                $this_1.$self.preprocessingY(layoutParameters);
            } else {
                $this_1.$self.preprocessingX(layoutParameters);
            }
        }
        $p.addMethod($this_1, 'preprocessing', preprocessing$1);
        function preprocessingX$1(layoutParameters) {
            var minX =  layoutParameters.get("graph.preprocessing.minX");
            var maxX =  layoutParameters.get("graph.preprocessing.maxX");

            var delimeter =  layoutParameters.get("graph.preprocessing.delimeter.x");

            var startY =  $this_1.layout.getY();
            var endY =  startY + $this_1.layout.getHeight();
            var startX =  $this_1.layout.getX();
            var endX =  startX + $this_1.layout.getWidth();

            $this_1.pp = layoutParameters.get("graph.preprocessing.canvasInnerSpaceWidth");

            var points =  new $p.HashMap();

            for (var i =  minX,j =  0;  i <= maxX;  i += delimeter, j++) {
                var t =  $p.map(i, minX, maxX, startX, endX);

                points.put($p.str( $p.__int_cast(j)) + ".x", t);
                points.put($p.str( $p.__int_cast(j)) + ".y", startY);
            }
            points.put("length",  (maxX / delimeter + 1));

            $this_1.series = new Series();
            $this_1.series.setPoints(points);
        }
        $p.addMethod($this_1, 'preprocessingX', preprocessingX$1);
        function preprocessingY$1(extendedParameters) {
            var minY =  extendedParameters.get("graph.preprocessing.minY");
            var maxY =  extendedParameters.get("graph.preprocessing.maxY");

            var delimeter =  extendedParameters.get("graph.preprocessing.delimeter.y");

            var startY =  $this_1.layout.getY();
            var endY =  startY + $this_1.layout.getHeight();
            var startX =  $this_1.layout.getX();
            var endX =  startX + $this_1.layout.getWidth();

            $this_1.canvasWidth = Graph.layout.getWidth();

            var points =  new $p.HashMap();

            $this_1.labels = $p.createJavaArray('String', [ $p.__int_cast(((maxY - minY) / delimeter)) + 1]);

            for (var i =  minY,j =  0;  i <= maxY;  i += delimeter, j++) {
                var t =  $p.map(i, minY, maxY, startY, endY);

                points.put($p.str( $p.__int_cast(j)) + ".x", endX);
                points.put($p.str( $p.__int_cast(j)) + ".y", t);

                $this_1.labels[ $p.__int_cast(j)] = $p.str(i);
            }

            for (var i =  0;  i < $this_1.labels.length / 2;  i++) {
                var temp =  $this_1.labels[i];
                $this_1.labels[i] = $this_1.labels[$this_1.labels.length - i - 1];
                $this_1.labels[$this_1.labels.length - i - 1] = temp;
            }

            points.put("length",  ((maxY - minY) / delimeter + 1));
            $this_1.series = new Series();
            $this_1.series.setPoints(points);
        }
        $p.addMethod($this_1, 'preprocessingY', preprocessingY$1);
        function getLabels$0() {
            return $this_1.labels;
        }
        $p.addMethod($this_1, 'getLabels', getLabels$0);
        function setTitle$1(title) {
            $this_1.title = title;
            if ($this_1.title == null) $this_1.title = "";
        }
        $p.addMethod($this_1, 'setTitle', setTitle$1);
        function $constr_2(orientation, labels){
            $superCstr();

            $this_1.parameters = null;
            $this_1.series = null;
            $this_1.labels = labels;
            $this_1.orientation = orientation.toLowerCase();
            $this_1.title = "";
        }

        function $constr_2(orientation, labels){
            $superCstr();

            $this_1.parameters = null;
            $this_1.series = null;
            $this_1.labels = $p.createJavaArray('String', [labels.length]);
            for (var i =  0;  i < labels.length;  i++) {
                $this_1.labels[i] = $p.str(labels[i]);
            }
            $this_1.orientation = orientation.toLowerCase();
            $this_1.title = "";
        }

        function $constr() {
            if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Axis;
})();
$p.Axis = Axis;
var Caption = (function() {
    function Caption() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.layout = null;
        $this_1.captionText = null;
        function setLayout$1(layout) {
            $this_1.layout = layout;
        }
        $p.addMethod($this_1, 'setLayout', setLayout$1);
        function draw$0() {
            var x =  $this_1.layout.getX() + ($this_1.layout.getWidth()/2);
            var y =  $this_1.layout.getY() + ($this_1.layout.getHeight()/2) + (Graph.theme.get("caption.textsize")/3);
            $p.pushMatrix();
            $p.pushStyle();

            $p.textAlign($p.CENTER);
            $p.textSize(Graph.theme.get("caption.textsize"));

            $p.text($this_1.captionText, x, y);

            $p.popStyle();
            $p.popMatrix();
        }
        $p.addMethod($this_1, 'draw', draw$0);
        function $constr_1(captionText){
            $superCstr();

            $this_1.captionText = captionText;
        }

        function $constr() {
            if(arguments.length === 1) {
                $constr_1.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Caption;
})();
$p.Caption = Caption;
var Error = (function() {
    function Error() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        function $constr() {
            $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Error;
})();
$p.Error = Error;
var Graph = (function() {
    function Graph() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        function bindEvents() {
            $this_1.$($this_1.canvasId).live("mousedown", function() {
                $this_1.downX = $p.mouseX;
                $this_1.downY = $p.mouseY;
                $this_1.$self.mouseDownHandler($p.mouseX, $p.mouseY);
            });

            $this_1.$($this_1.canvasId).live("mouseup", function() {
                $this_1.$self.mouseUpHandler($p.mouseX, $p.mouseY);
            });

            $this_1.$($this_1.canvasId).live("mousemove", function() {
                $this_1.$self.mouseMoveHandler($p.mouseX, $p.mouseY);
            });
        }
        $this_1.$ = null;
        $this_1.canvasId = null;
        $this_1.bind =  false;
        $p.defineProperty($this_1, 'charts', {
            get: function(){
                return Graph.charts
                }, 
            set: function(val){
                Graph.charts = val
                }
            });
    $this_1.yaxis = null;
    $this_1.xaxis = null;
    $this_1.legend = null;
    $p.defineProperty($this_1, 'theme', {
        get: function(){
            return Graph.theme
            }, 
        set: function(val){
            Graph.theme = val
            }
        });
$this_1.caption = null;
$this_1.scrollbar = null;
$p.defineProperty($this_1, 'layout', {
    get: function(){
        return Graph.layout
        }, 
    set: function(val){
        Graph.layout = val
        }
    });
$this_1.iconsLayout = null;
$p.defineProperty($this_1, 'resources', {
    get: function(){
        return Graph.resources
        }, 
    set: function(val){
        Graph.resources = val
        }
    });
$p.defineProperty($this_1, 'attributes', {
    get: function(){
        return Graph.attributes
        }, 
    set: function(val){
        Graph.attributes = val
        }
    });
$p.defineProperty($this_1, 'labels', {
    get: function(){
        return Graph.labels
        }, 
    set: function(val){
        Graph.labels = val
        }
    });
$p.defineProperty($this_1, 'type', {
    get: function(){
        return Graph.type
        }, 
    set: function(val){
        Graph.type = val
        }
    });
$p.defineProperty($this_1, 'TOP_ALIGN', {
    get: function(){
        return Graph.TOP_ALIGN
        }, 
    set: function(val){
        Graph.TOP_ALIGN = val
        }
    });
$p.defineProperty($this_1, 'RIGHT_ALIGN', {
    get: function(){
        return Graph.RIGHT_ALIGN
        }, 
    set: function(val){
        Graph.RIGHT_ALIGN = val
        }
    });
$p.defineProperty($this_1, 'BOTTOM_ALIGN', {
    get: function(){
        return Graph.BOTTOM_ALIGN
        }, 
    set: function(val){
        Graph.BOTTOM_ALIGN = val
        }
    });
$p.defineProperty($this_1, 'LEFT_ALIGN', {
    get: function(){
        return Graph.LEFT_ALIGN
        }, 
    set: function(val){
        Graph.LEFT_ALIGN = val
        }
    });
$p.defineProperty($this_1, 'chartNumber', {
    get: function(){
        return Graph.chartNumber
        }, 
    set: function(val){
        Graph.chartNumber = val
        }
    });
$p.defineProperty($this_1, 'activeSeries', {
    get: function(){
        return Graph.activeSeries
        }, 
    set: function(val){
        Graph.activeSeries = val
        }
    });
$p.defineProperty($this_1, 'activeChart', {
    get: function(){
        return Graph.activeChart
        }, 
    set: function(val){
        Graph.activeChart = val
        }
    });
$p.defineProperty($this_1, 'minDif', {
    get: function(){
        return Graph.minDif
        }, 
    set: function(val){
        Graph.minDif = val
        }
    });
$this_1.resetZoomText =  "Reset Zoom";
$this_1.animationTime =   1;
$this_1.fps =  20;
$this_1.showAnimation =  true;
$this_1.animationIsComplete =  true;
$p.defineProperty($this_1, 'currentPosition', {
    get: function(){
        return Graph.currentPosition
        }, 
    set: function(val){
        Graph.currentPosition = val
        }
    });
$p.defineProperty($this_1, 'zoomCoeficient', {
    get: function(){
        return Graph.zoomCoeficient
        }, 
    set: function(val){
        Graph.zoomCoeficient = val
        }
    });
$p.defineProperty($this_1, 'maxZoom', {
    get: function(){
        return Graph.maxZoom
        }, 
    set: function(val){
        Graph.maxZoom = val
        }
    });
$this_1.beforeDraw =  null;
$this_1.afterDraw =  null;
$this_1.mouseDown =  false;
$this_1.mouseDrag =  false;
$this_1.mouseDownX =  0;
$this_1.mouseDownY =  0;
$this_1.mouseUpX =  0;
$this_1.mouseUpY =  0;
$this_1.dragStart =  0;
$this_1.dragEnd =  0;
$this_1.scrollBarPositionBuffer =  0;
$p.defineProperty($this_1, 'averageAreaSize', {
    get: function(){
        return Graph.averageAreaSize
        }, 
    set: function(val){
        Graph.averageAreaSize = val
        }
    });
$this_1.mousePressed_ =  false;
$this_1.mouseDragged_ =  true;
$this_1.downX =  0;
$this_1.downY =  0;
$this_1.upX =  0;
$this_1.upY =  0;
$this_1.px =  0;
$this_1.py =  0;
function setXMLFromUrl$1(path) {
    var xml =  new $p.XMLElement();

    try {
        xml = new $p.XMLElement($this_1.$self, path);
    } catch (e) {
        $p.__printStackTrace(e);
        return;
    }

    $this_1.$self.parseXML(xml);
}
$p.addMethod($this_1, 'setXMLFromUrl', setXMLFromUrl$1);
function setXML$1(xmlString) {
    var xml =  $p.XMLElement.parse(xmlString);
    $this_1.$self.parseXML(xml);
}
$p.addMethod($this_1, 'setXML', setXML$1);
function parseXML$1(xml) {
    Graph.attributes = $this_1.$self.getAttributes(xml);

    var captionText =  Graph.attributes.get("caption");
    Graph.resources.put("caption", captionText);

    var xAxisName =  Graph.attributes.get("xaxisname");
    Graph.resources.put("xaxisname", xAxisName);

    var yAxisName =  Graph.attributes.get("yaxisname");
    Graph.resources.put("yaxisname", yAxisName);

    Graph.resources.put("legendalign", $this_1.$self.convertOrientation(Graph.attributes.containsKey("legendalign") ? Graph.attributes.get("legendalign") : "right"));

    {
        var labelsXML =  null;

        var tempXMLElement =  xml.getChild("labels");

        if (tempXMLElement != null) {
            labelsXML = tempXMLElement.getChildren("set");
            Graph.labels = $p.createJavaArray('String', [labelsXML.length]);

            for (var i =  0;  i < labelsXML.length;  i++) {
                Graph.labels[i] = labelsXML[i].getString("label");
            }
        }
    }

    var chartsXML =  xml.getChildren("chart");

    if (chartsXML.length > 0) {
        for (var i =  0;  i < chartsXML.length;  i++) {
            var chartAttributes =  $this_1.$self.getAttributes(chartsXML[i]);
            var series =  null;

            var seriesXML =  chartsXML[i].getChildren("series");

            series = $p.createJavaArray('Series', [seriesXML.length]);

            for (var j =  0;  j < seriesXML.length;  j++) {
                var seriesAttributes =  $this_1.$self.getAttributes(seriesXML[j]);

                var sets =  seriesXML[j].getChildren("set");

                try {
                    series[j] = new Series($this_1.$self.parseValuesFromXML(sets), seriesAttributes);
                } catch (e) {
                    $p.__printStackTrace(e);
                }

                if ($this_1.$self.parseLabelsFromXML(sets) != null) {
                    Graph.labels = $this_1.$self.parseLabelsFromXML(sets);
                }
            }

            $this_1.$self.setChart(chartAttributes, series);

            if ($p.__equals(chartAttributes.get("type").toLowerCase(),"columnchart") || $p.__equals(chartAttributes.get("type").toLowerCase(),"piechart")) {
                Graph.attributes.put("zoom", "0");
            }
        }
    }

    if (xml.hasAttribute("width") && xml.hasAttribute("height")) {
        var w =  xml.getInt("width");
        var h =  xml.getInt("height");

        $p.size(w, h);
    } else {
        
        var canvas =  document.getElementById($this_1.canvasId.substring(1));
        
        $p.size(canvas.width, canvas.height);
        
    }

    Graph.theme = new Theme();

    $this_1.$self.initLayout();

    $this_1.$self.preprocessing();

    if (!$this_1.bind) {
        bindEvents();
        $this_1.bind = true;
    }
}
$p.addMethod($this_1, 'parseXML', parseXML$1);
function getAttributes$1(xml) {
    var map =  new $p.HashMap();

    var names =  xml.attributes;
    for (var k =  0;  k < names.length;  k++) {
        map.put(names[k]["name"].toLowerCase(), names[k]["value"]);
    }
    return map;
}
$p.addMethod($this_1, 'getAttributes', getAttributes$1);
function parseValuesFromXML$1(xml) {
    var values =  $p.createJavaArray('float', [xml.length]);

    for (var i =  0;  i < xml.length;  i++) {
        if (xml[i].hasAttribute("value")) {
            values[i] = xml[i].getFloat("value");
        } else {
            throw new Exception("нет данных : " + xml[i].toString());
        }
    }

    return values;
}
$p.addMethod($this_1, 'parseValuesFromXML', parseValuesFromXML$1);
function parseLabelsFromXML$1(xml) {
    var tempLabels =  $p.createJavaArray('String', [xml.length]);

    var flag =  false;

    for (var i =  0;  i < xml.length;  i++) {
        if (xml[i].hasAttribute("label")) {
            flag = true;
            tempLabels[i] = xml[i].getString("label");
        } else if (flag) {
            tempLabels[i] = new String();
        }
    }
    if (!flag) {
        return null;
    }
    return tempLabels;
}
$p.addMethod($this_1, 'parseLabelsFromXML', parseLabelsFromXML$1);
function setChart$2(attributes, series) {
    var chart =  null;
    try {
        if ($p.__equals(attributes.get("type").toLowerCase(),"areachart")) {
            chart = new AreaChart(attributes, series);
        } else if ($p.__equals(attributes.get("type").toLowerCase(),"columnchart")) {
            chart = new ColumnChart(attributes, series);
        } else if ($p.__equals(attributes.get("type").toLowerCase(),"linechart")) {
            chart = new LineChart(attributes, series);
        } else if ($p.__equals(attributes.get("type").toLowerCase(),"piechart")) {
            chart = new PieChart(attributes, series, Graph.labels);
        }
    } catch (e) {
        $p.__printStackTrace(e);
    }
    if (chart != null) {
        Graph.charts.add(chart);
        Graph.type = chart.getType();
    }
}
$p.addMethod($this_1, 'setChart', setChart$2);
function initLayout$0() {
    var top =  $this_1.$self.getTheme().get("margin.top");
    var left =  $this_1.$self.getTheme().get("margin.left");
    var right =  $p.width - $this_1.$self.getTheme().get("margin.right");
    var bottom =  $p.height - $this_1.$self.getTheme().get("margin.bottom");

    if (Graph.type == Chart.VERTICAL_CHART) {
        if (Graph.attributes.containsKey("showlegend")) {
            if ($p.__equals(Graph.attributes.get("showlegend"),"1")) {
                $this_1.legend = new Legend(Graph.charts);
                $this_1.legend.setOrientation(Graph.resources.containsKey("legendalign") ?  Graph.resources.get("legendalign") : 0);
            }
        } else {
            $this_1.legend = new Legend(Graph.charts);
            $this_1.legend.setOrientation(Graph.resources.containsKey("legendalign") ?  Graph.resources.get("legendalign") : 0);
        }

        $this_1.yaxis = new Axis("y", $p.createJavaArray('String', [0]));
        $this_1.yaxis.setTitle( Graph.resources.get("yaxisname"));

        $this_1.xaxis = new Axis("x", Graph.labels);
        $this_1.xaxis.setTitle( Graph.resources.get("xaxisname"));

        $this_1.caption = new Caption( Graph.resources.get("caption"));

        if (Graph.attributes.containsKey("zoom") && $p.__equals(Graph.attributes.get("zoom"),"1")) {
            $this_1.scrollbar = new ScrollBar();

            for (var i =  0;  i < Graph.charts.size();  i++) {
                if (Graph.charts.get(i).constructor == LineChart || Graph.charts.get(i).constructor == AreaChart) {
                    Graph.maxZoom = Math.max(Graph.maxZoom,  ( Graph.charts.get(i)).seriesLength() -  1.5);
                }
            }
        }
    } else if (Graph.type == Chart.RADIAL_CHART) {
        $this_1.caption = new Caption( Graph.resources.get("caption"));
    }

    if (Graph.type == Chart.VERTICAL_CHART) {
        if ($this_1.scrollbar != null) {
            bottom -= 10;
        }

        if ($this_1.xaxis != null) {
            bottom -= 5 + ($p.width * $p.height / Graph.averageAreaSize) + $this_1.$self.getTheme().get("axis.textsize") + 10;

            if (Graph.resources.containsKey("xaxisname")) {
                bottom -= $this_1.$self.getTheme().get("axis.textsize") + 10;
            }
        }

        if ($this_1.yaxis != null) {
            var maxValue =  0;

            for (var i =  0;  i < Graph.charts.size();  i++) {
                for (var j =  0;  j < ( Graph.charts.get(i)).seriesQty();  j++) {
                    var tempMax =  Graph.max(( Graph.charts.get(i)).getSeries(j).getValues());
                    maxValue = tempMax > maxValue ? tempMax : maxValue;
                }
            }

            left += 5 + Graph.textWidth($p.str(maxValue * 10)) + 10;

            if (Graph.resources.containsKey("yaxisname")) {
                left += $this_1.$self.getTheme().get("axis.textsize") + 10;
            }
        }

        if ($this_1.legend != null) {
            $p.pushMatrix();
            $p.pushStyle();

            $p.textSize(Graph.theme.get("legend.textsize"));

            if ($this_1.legend.getOrientation() == Graph.RIGHT_ALIGN) {
                var maxTextWidth =  0;

                for (var i =  0;  i < Graph.charts.size();  i++) {
                    var chart =   Graph.charts.get(i);
                    for (var j =  0;  j < chart.seriesQty();  j++) {
                        var nameTextWidth =  Graph.textWidth(chart.getSeries(j).getAttribute("name"));

                        maxTextWidth = nameTextWidth > maxTextWidth ? nameTextWidth : maxTextWidth;
                    }
                }
                maxTextWidth += 40 + Graph.theme.get("legend.textsize");

                right -= maxTextWidth;
            } else if ($this_1.legend.getOrientation() == Graph.BOTTOM_ALIGN) {
                var textWidth_ =  0;
                var seriesCount =  0;

                var canvasWidth =  right - left;
                var tempValue =  $this_1.$self.getTheme().get("legend.textsize") + 10;

                for (var i =  0;  i < Graph.charts.size();  i++) {
                    var chart =   Graph.charts.get(i);
                    for (var j =  0;  j < chart.seriesQty();  j++) {
                        var nameTextWidth =  Graph.textWidth(chart.getSeries(j).getAttribute("name"));

                        if (seriesCount * 50 + textWidth_ + nameTextWidth > canvasWidth) {
                            tempValue += $this_1.$self.getTheme().get("legend.textsize") + 10;
                            seriesCount = 0;
                            textWidth_ = 0;
                        }

                        textWidth_ += nameTextWidth;
                        seriesCount++;
                    }
                }

                bottom -= tempValue;
            }

            $p.popMatrix();
            $p.popStyle();
        }
    }

    if ($this_1.caption != null) {
        top += $this_1.$self.getTheme().get("caption.textsize") + 20;
    }

    {
        var tempLayout =  new Layout(left, top, right - left, bottom - top);

        Graph.layout = tempLayout;
    }
    if (Graph.type == Chart.VERTICAL_CHART) {
        if ($this_1.yaxis != null) {
            var tempLayout =  new Layout($this_1.$self.getTheme().get("margin.left"), top, left - $this_1.$self.getTheme().get("margin.left"), bottom - top);

            $this_1.yaxis.setLayout(tempLayout);
        }

        if ($this_1.scrollbar != null) {
            var tempLayout =  new Layout(left, bottom, right - left, 10);

            $this_1.scrollbar.setLayout(tempLayout);
        }

        if ($this_1.xaxis != null) {
            var tempLayout =  new Layout(left, bottom + ($this_1.scrollbar != null ? $this_1.scrollbar.layout.getHeight() : 0), right - left, 5 + $this_1.$self.getTheme().get("axis.textsize") + 10);
            $this_1.xaxis.setLayout(tempLayout);
        }

        if ($this_1.legend != null) {
            if ($this_1.legend.getOrientation() == Graph.RIGHT_ALIGN) {
                var tempLayout =  new Layout(right, top, $p.width - right - $this_1.$self.getTheme().get("margin.right"), bottom - top);

                $this_1.legend.setLayout(tempLayout);
            } else if ($this_1.legend.getOrientation() == Graph.BOTTOM_ALIGN) {
                var tempLayout =  new Layout(left, bottom + ($this_1.xaxis != null ? $this_1.xaxis.layout.getHeight() : 0) + ($this_1.scrollbar != null ? $this_1.scrollbar.layout.getHeight() : 0), right - left, $p.height - bottom - Graph.theme.get("margin.bottom") - ($this_1.xaxis != null ? $this_1.xaxis.layout.getHeight() : 0) - ($this_1.scrollbar != null ? $this_1.scrollbar.layout.getHeight() : 0));
                $this_1.legend.setLayout(tempLayout);
            }
        }
    }
    if ($this_1.caption != null) {
        var tempLayout =  new Layout(left, $this_1.$self.getTheme().get("margin.top"), right - left, top - $this_1.$self.getTheme().get("margin.top"));

        $this_1.caption.setLayout(tempLayout);
    }

    $this_1.iconsLayout = new Layout(right, Graph.theme.get("margin.top"), $p.width - right - Graph.theme.get("margin.right"), top - Graph.theme.get("margin.top"));
}
$p.addMethod($this_1, 'initLayout', initLayout$0);
function setTheme$1(xml) {
    var XMLColors =  xml.getChild("colors").getChildren("set");
    var colors =  $p.createJavaArray('String', [XMLColors.length]);

    for (var i =  0;  i < XMLColors.length;  i++) {
        colors[i] = XMLColors[i].getString("color");
    }
}
$p.addMethod($this_1, 'setTheme', setTheme$1);
$p.addMethod($this_1, 'max', max$1);
$p.addMethod($this_1, 'min', min$1);
function preprocessing$0() {
    if (Graph.type == Chart.RADIAL_CHART) {
        var chart =  Graph.charts.get(Graph.charts.size() - 1);
        chart.preprocessing(new $p.HashMap());
    } else if (Graph.type == Chart.VERTICAL_CHART) {
        var startX =  Graph.layout.getX();
        var endX =  startX + Graph.layout.getWidth();

        var startY =  Graph.layout.getY();
        var endY =  startY + Graph.layout.getHeight();

        var canvasInnerSpaceWidth =  0;

        var columnQnty =  0;

        for (var i =  0;  i < Graph.charts.size();  i++) {
            if (Graph.charts.get(i).constructor == ColumnChart) {
                var chart =   Graph.charts.get(i);
                var flag =  false;
                for (var j =  0;  j < chart.seriesQty();  j++) {
                    if (chart.series[j].getVisible()) {
                        var plotWidth =  Graph.layout.getWidth() / (( Graph.charts.get(i)).seriesLength());
                        canvasInnerSpaceWidth = plotWidth / 2;
                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    break;
                }
            }
        }

        var maxY =  0,minY =  0;
        for (var i =  0;  i < Graph.charts.size();  i++) {
            if (Graph.charts.get(i).constructor == LineChart || Graph.charts.get(i).constructor == AreaChart) {
                var line =   Graph.charts.get(i);

                for (var j =  0;  j < line.seriesQty();  j++) {
                    if (!line.series[j].getVisible()) {
                        continue;
                    }
                    var values =  line.getSeries(j).getValues();

                    maxY = Graph.max(values) > maxY ? Graph.max(values) : maxY;
                    minY = Graph.min(values) < minY ? Graph.min(values) : minY;
                }
            } else if (Graph.charts.get(i).constructor == ColumnChart) {
                var bar =   Graph.charts.get(i);

                for (var j =  0;  j < bar.seriesQty();  j++) {
                    if (!bar.series[j].getVisible()) {
                        continue;
                    }

                    var tMaxY =  Graph.max(bar.getSeries(j).getValues());
                    var tMinY =  Graph.min(bar.getSeries(j).getValues());
                    maxY = tMaxY > maxY ? tMaxY : maxY;
                    minY = tMinY < minY ? tMinY : minY;
                }
            }
        }

        var delimeterY =  0;

        {
            var axisMinValue =  0;
            var axisMaxValue =  1;
            var minValue =  0,maxValue =  0;

            if (minY != 0) {
                minY *= -1;
                axisMinValue = 1;
            }

            if (maxY >= 10) {
                var temp =  maxY;
                while (temp >= 10) {
                    axisMaxValue *= 10;
                    temp /= 10;
                }
            } else if (0 < maxY && maxY < 1) {
                var temp =  maxY;
                while (temp < 1) {
                    axisMaxValue /= 10;
                    temp *= 10;
                }
            }

            if (minY != 0) {
                if (minY >= 10) {
                    var temp =  minY;

                    while (temp >= 10) {
                        axisMinValue *= 10;
                        temp /= 10;
                    }
                } else if (0 < minY && minY < 1) {
                    var temp =  minY;
                    while (temp < 1) {
                        axisMinValue /= 10;
                        temp *= 10;
                    }
                }
            }

            var divLinesQnty =  $p.createJavaArray('float', [3]);
            divLinesQnty[0] = 10;
            divLinesQnty[1] = 5;
            divLinesQnty[2] = 2;

            for (var i =  0;  i < 1000;  i++) {
                if (axisMaxValue <= maxY) {
                    axisMaxValue *= (i % 3 == 0 || i % 3 == 2) ? 2 : 2.5;
                } else if ((axisMaxValue - maxY) * 100 / (maxY) > $this_1.$self.getTheme().get("graph.freespace.percent")) {
                    break;
                } else {
                    axisMaxValue *= (i % 3 == 0 || i % 3 == 2) ? 2 : 2.5;
                };
            }

            if (minY != 0) {
                for (var i =  0;  i < 1000;  i++) {
                    if (axisMinValue <= minY) {
                        axisMinValue *= (i % 3 == 0 || i % 3 == 2) ? 2 : 2.5;
                    } else if ((axisMinValue - minY) * 100 / (minY) > $this_1.$self.getTheme().get("graph.freespace.percent")) {
                        break;
                    } else {
                        axisMinValue *= (i % 3 == 0 || i % 3 == 2) ? 2 : 2.5;
                    };
                }
            }

            var coef =  axisMinValue > 0 ? 2 : 1; 
            var tempDelimeterY =  Graph.layout.getHeight();
            var flag =  false;
            for (var i =  0;  i < divLinesQnty.length;  i++) {
                if (Graph.layout.getHeight() / (coef * divLinesQnty[i]) >= 40) {
                    tempDelimeterY = Math.max(axisMaxValue, axisMinValue) / divLinesQnty[i];
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                tempDelimeterY = Math.max(axisMaxValue, axisMinValue) / divLinesQnty[2];
            }

            for (var i =  0;  i <= axisMaxValue + axisMinValue;  i += tempDelimeterY) {
                maxValue = i;
                if (i <= maxY) {
                    continue;
                }
                var t =  i - maxY;
                var percent =  t * 100 / maxY;
                if (percent < $this_1.$self.getTheme().get("graph.freespace.percent")) {
                    continue;
                } else {
                    break;
                }
            }

            if (minY != 0) {
                for (var i =  0;  i <= axisMinValue + axisMaxValue;  i += tempDelimeterY) {
                    minValue = i;

                    if (i <= minY) {
                        continue;
                    }

                    var t =  i - minY;
                    var percent =  t * 100 / minY;
                    if (percent < $this_1.$self.getTheme().get("graph.freespace.percent")) {
                        continue;
                    } else {
                        break;
                    }
                }
            }

            maxY = maxValue;

            if (minY != 0) {
                minY = -minValue;
            }

            delimeterY = tempDelimeterY;
        }

        var layoutParameters =  new $p.HashMap();

        var path =  "graph.preprocessing.";

        layoutParameters.put(path + "minY", minY);
        layoutParameters.put(path + "maxY", maxY);
        layoutParameters.put(path + "delimeter.y", delimeterY);

        var zeroPosition =  $p.map(0, minY, maxY, Graph.layout.getY(), Graph.layout.getY() + Graph.layout.getHeight());

        layoutParameters.put(path + "zero.position.y", zeroPosition);

        layoutParameters.put(path + "minX",  0);
        if (canvasInnerSpaceWidth > 0) {
            layoutParameters.put(path + "maxX",  ( Graph.charts.get(0)).seriesLength());
        } else {
            layoutParameters.put(path + "maxX",  ( Graph.charts.get(0)).seriesLength() - 1);
        }
        layoutParameters.put(path + "delimeter.x",  1);

        layoutParameters.put(path + "startX", startX);
        layoutParameters.put(path + "endX", endX);
        layoutParameters.put(path + "startY", startY);
        layoutParameters.put(path + "endY", endY);
        layoutParameters.put(path + "canvasInnerSpaceWidth", canvasInnerSpaceWidth);

        for (var i =  0;  i < Graph.charts.size();  i++) {
            Graph.charts.get(i).preprocessing(layoutParameters);
        }

        $this_1.yaxis.preprocessing(layoutParameters);
        $this_1.xaxis.preprocessing(layoutParameters);

        for (var i =  0;  i < Graph.charts.size();  i++) {
            Graph.charts.get(i).invertY();
        }
    }
}
$p.addMethod($this_1, 'preprocessing', preprocessing$0);
function onBeforeDraw$0() {

}
$p.addMethod($this_1, 'onBeforeDraw', onBeforeDraw$0);
function onAfterDraw$0() {

}
$p.addMethod($this_1, 'onAfterDraw', onAfterDraw$0);
function draw$0() {
    $this_1.$self.clear();

    if ($this_1.beforeDraw != null && $this_1.beforeDraw.getFlag()) {
        $this_1.beforeDraw.fire();
    }

    if ($this_1.showAnimation) {
        $this_1.$self.animate();
        $this_1.showAnimation = false;
        return;
    }

    $this_1.$self.drawCaption();
    $this_1.$self.drawIcons();
    if (Graph.type == Chart.VERTICAL_CHART) {
        $this_1.$self.drawAxes();

        if ($this_1.legend != null) {
            $this_1.legend.draw();
        }
    }
    Graph.chartNumber = 0;
    for (var i =  0;  i < Graph.charts.size();  i++) {
        Graph.charts.get(i).draw(1, 1);
    }

    if ($this_1.scrollbar != null) {
        $this_1.scrollbar.draw();
    }

    if (Graph.zoomCoeficient > 1) {
        $p.textAlign($p.LEFT);
        $p.text($this_1.resetZoomText, Graph.layout.getX() + Graph.layout.getWidth() - Graph.textWidth($this_1.resetZoomText) - 20, Graph.layout.getY() + 20);
    }

    if ($this_1.afterDraw != null && $this_1.afterDraw.getFlag()) {
        $this_1.afterDraw.fire();
    }
}
$p.addMethod($this_1, 'draw', draw$0);
function animate$0() {
    var framesCount =   $p.__int_cast(($this_1.animationTime * $this_1.fps));

    function d(time) {
        var def =   $this_1.$.Deferred();

        setTimeout(function() {
            var currentFrame =   time / dTime;
            def.resolve(currentFrame);
        }, time);

        return def.promise();
    };

    var framesCount =    $p.__int_cast(($this_1.animationTime * $this_1.fps));
    var time =   0;

    var dTime =   $this_1.animationTime * 1000 / framesCount;

    for (var i =   0;   i < framesCount;   i++) {
        time+=dTime;
        var t =   d(time);

        $this_1.$.when(t).done(function(frame) {
            (function(i, framesCount) {
                $this_1.$self.clear();
                $this_1.$self.drawCaption();
                if (Graph.type == Chart.VERTICAL_CHART) {
                    $this_1.$self.drawAxes();

                    $this_1.legend.draw(Graph.theme);
                }

                for (var j =   0;   j < $this_1.charts.size();   j++) {
                    $this_1.charts.get(j).draw(i, framesCount);
                }
                if (i == framesCount-1) $this_1.animationIsComplete = true;
            })(frame, framesCount);
        });
    }
}
$p.addMethod($this_1, 'animate', animate$0);
function clear$0() {
    $p.noStroke();
    $p.fill(250, 250, 255);
    $p.rect(0, 0, $p.width, $p.height);
    $p.fill(0);
}
$p.addMethod($this_1, 'clear', clear$0);
function drawCaption$0() {
    if ($this_1.caption != null) {
        $this_1.caption.draw();
    }
}
$p.addMethod($this_1, 'drawCaption', drawCaption$0);
function drawIcons$0() {

}
$p.addMethod($this_1, 'drawIcons', drawIcons$0);
function drawAxes$0() {
    if (Graph.attributes.get("showyaxis") == null || Graph.attributes.get("showyaxis") == "1") {
        $this_1.yaxis.draw();
    }
    $this_1.xaxis.draw();
}
$p.addMethod($this_1, 'drawAxes', drawAxes$0);
function zoom$2(start, end) {
    start -= Graph.layout.getX();
    end -= Graph.layout.getX();

    if (start > end) {
        var temp =  start;
        start = end;
        end = temp;
    }

    start = start > 0 ? start : 0;
    end = end < Graph.layout.getWidth() ? end : Graph.layout.getWidth();

    var diff =  end - start;

    Graph.currentPosition = (start + Graph.currentPosition) / Graph.zoomCoeficient;
    Graph.zoomCoeficient *= Graph.layout.getWidth() / diff;
    Graph.zoomCoeficient = Graph.zoomCoeficient < Graph.maxZoom ? Graph.zoomCoeficient : Graph.maxZoom;
    Graph.currentPosition *= Graph.zoomCoeficient;

    Graph.currentPosition =
    Graph.currentPosition < Graph.layout.getWidth() * (Graph.zoomCoeficient - 1)
    ? Graph.currentPosition : Graph.layout.getWidth() * (Graph.zoomCoeficient - 1);
}
$p.addMethod($this_1, 'zoom', zoom$2);
$p.addMethod($this_1, 'min', min$2_2);
$p.addMethod($this_1, 'max', max$2_2);
function convertOrientation$1(orientation) {
    if ($p.__equals(orientation,"right")) {
        return Graph.RIGHT_ALIGN;
    } else if ($p.__equals(orientation,"bottom")) {
        return Graph.BOTTOM_ALIGN;
    } else if ($p.__equals(orientation,"left")) {
        return Graph.LEFT_ALIGN;
    } else {
        return Graph.TOP_ALIGN;
    }
}
$p.addMethod($this_1, 'convertOrientation', convertOrientation$1);
function getTheme$0() {
    return Graph.theme;
}
$p.addMethod($this_1, 'getTheme', getTheme$0);
function mouseDownHandler$2(x1, y1) {
    if (!$this_1.animationIsComplete) {
        return;
    }

    $this_1.mouseDown = true;
    $this_1.dragStart = x1;

    $this_1.mouseDownX = x1;
    $this_1.mouseDownY = y1;

    if ($this_1.scrollbar != null && $this_1.scrollbar.layout.isInside(x1, y1)) {
        $this_1.scrollbar.setDragPosition();
    }
}
$p.addMethod($this_1, 'mouseDownHandler', mouseDownHandler$2);
function mouseUpHandler$2(x1, y1) {
    if (!$this_1.animationIsComplete) {
        return;
    }

    if ($this_1.mouseDrag) {
        if (Graph.layout.isInside($this_1.mouseDownX, $this_1.mouseDownY)) {
            if ($p.__equals(Graph.attributes.get("zoom"),"1")) {
                $this_1.$self.zoom($this_1.dragStart, $this_1.dragEnd);
                $this_1.$self.draw();
            }
        }
    } else {
        var flag =  false;

        if (Graph.zoomCoeficient > 1) {
            var resetZoomTextX =  Graph.layout.getX() + Graph.layout.getWidth() - Graph.textWidth($this_1.resetZoomText) - 20;
            var resetZoomTextY =  Graph.layout.getY();
            var resetZoomTextWidth =  Graph.textWidth($this_1.resetZoomText) + 20;
            var resetZoomTextHeight =  20;

            if (resetZoomTextX <= x1 && x1 <= resetZoomTextX + resetZoomTextWidth
                && resetZoomTextY <= y1 && y1 <= resetZoomTextY + resetZoomTextHeight) {
                Graph.zoomCoeficient = 1;
                Graph.currentPosition = 0;

                $this_1.$self.draw();

                flag = true;
            }
        }
        if (!flag) {
            if (Graph.layout.isInside(x1, y1)) {
                if (Graph.type == Chart.RADIAL_CHART) {
                    ( Graph.charts.get(Graph.charts.size() - 1)).slice(x1, y1);
                    $this_1.$self.draw();
                }
            } else if ($this_1.legend != null && $this_1.legend.layout.isInside(x1, y1)) {
                var series =  $this_1.legend.getSeriesByCoords(x1, y1);

                if (series != null) {
                    series.setVisible(!series.getVisible());

                    var value =  series.getAttribute("enabled");
                    if (value == null || value == "1") {
                        series.setAttribute("enabled", "0");
                    } else {
                        series.setAttribute("enabled", "1");
                    }

                    $this_1.$self.preprocessing();
                    $this_1.$self.draw();
                }
            } else if ($this_1.iconsLayout.isInside(x1, y1)) {
                var temp =  new Layout($this_1.iconsLayout.getX() + $this_1.iconsLayout.getWidth() - 20, $this_1.iconsLayout.getY(), 20, 20);

                if (temp.isInside(x1, y1)) {

            }
            }
        }
    }

    $this_1.mouseDown = false;
    $this_1.mouseDrag = false;
    $this_1.scrollBarPositionBuffer = 0;
}
$p.addMethod($this_1, 'mouseUpHandler', mouseUpHandler$2);
function mouseDragHandler$4(x1, y1, x2, y2) {
    if (!$this_1.animationIsComplete) {
        return;
    }

    if ($this_1.mouseDown) {
        $p.cursor($p.ARROW);

        if (Graph.layout.isInside(x1, y1)) {
            if (Graph.attributes.containsKey("zoom") && $p.__equals(Graph.attributes.get("zoom"),"1")) {
                $this_1.mouseDrag = true;

                $this_1.$self.draw();

                $p.noStroke();
                $p.fill(0, 162, 232, 125);

                $this_1.dragEnd = x2;

                $this_1.dragEnd = $this_1.dragEnd < Graph.layout.getX() + Graph.layout.getWidth() ? $this_1.dragEnd : Graph.layout.getX() + Graph.layout.getWidth();
                $this_1.dragEnd = $this_1.dragEnd > Graph.layout.getX() ? $this_1.dragEnd : Graph.layout.getX();

                $p.rect($this_1.dragStart, Graph.layout.getY(), $this_1.dragEnd - $this_1.dragStart, Graph.layout.getHeight());

                $p.fill(0);
                $p.stroke(0);
            }
        } else if ($this_1.scrollbar != null) {
            if ($this_1.scrollbar.layout.isInside(x1, y1)) {
                if ($this_1.scrollbar.getDragPosition() <= x1 && x1 <= $this_1.scrollbar.getDragPosition() + $this_1.scrollbar.getRunnerWidth()) {
                    $p.cursor($p.HAND);
                    Graph.currentPosition -= $this_1.scrollBarPositionBuffer;

                    var temp =  (x2 - x1) * Graph.zoomCoeficient;

                    temp = Graph.currentPosition + temp >= 0 ? temp : -Graph.currentPosition;
                    temp = Graph.currentPosition + temp <= Graph.layout.getWidth() * (Graph.zoomCoeficient - 1) ? temp : Graph.layout.getWidth() * (Graph.zoomCoeficient - 1) - Graph.currentPosition;

                    $this_1.scrollBarPositionBuffer = temp;

                    Graph.currentPosition += temp;

                    $this_1.$self.draw();
                }
            }
        }
    }
}
$p.addMethod($this_1, 'mouseDragHandler', mouseDragHandler$4);
function mouseMoveHandler$2(x1, y1) {
    if (!$this_1.animationIsComplete) {
        return;
    }

    if ($this_1.mouseDown) {
        $this_1.$self.mouseDragHandler($this_1.mouseDownX, $this_1.mouseDownY, x1, y1);
        return;
    }

    var flag =  false;

    if (Graph.zoomCoeficient > 1) {
        var resetZoomTextX =  Graph.layout.getX() + Graph.layout.getWidth() - Graph.textWidth($this_1.resetZoomText) - 20;
        var resetZoomTextY =  Graph.layout.getY();
        var resetZoomTextWidth =  Graph.textWidth($this_1.resetZoomText) + 20;
        var resetZoomTextHeight =  20;

        if (resetZoomTextX <= x1 && x1 <= resetZoomTextX + resetZoomTextWidth
            && resetZoomTextY <= y1 && y1 <= resetZoomTextY + resetZoomTextHeight) {
            flag = true;
            $p.cursor($p.HAND);
        } else {
            $p.cursor($p.ARROW);
        }

        if ($this_1.scrollbar != null && $this_1.scrollbar.layout.isInside(x1, y1)) {
            flag = true;
            $p.cursor($p.HAND);
        }
    }
    if (!flag) {
        if (Graph.layout.isInside(x1, y1)) {
            $p.cursor($p.ARROW);

            Graph.minDif = 40;
            var tooltip =  null;
            if (Graph.type == Chart.VERTICAL_CHART) {
                for (var i =  0;  i < Graph.charts.size();  i++) {
                    if (Graph.charts.get(i).constructor == LineChart) {
                        var temp =  Graph.charts.get(i).getTooltip( $p.__int_cast(x1),  $p.__int_cast(y1));
                        tooltip = temp != null ? temp : tooltip;
                    }
                }

                if (tooltip == null) {
                    for (var i =  0;  i < Graph.charts.size();  i++) {
                        if (Graph.charts.get(i).constructor == AreaChart) {
                            var temp =  Graph.charts.get(i).getTooltip( $p.__int_cast(x1),  $p.__int_cast(y1));
                            tooltip = temp != null ? temp : tooltip;
                        }
                    }
                }

                if (tooltip == null) {
                    for (var i =  0;  i < Graph.charts.size();  i++) {
                        if (Graph.charts.get(i).constructor == ColumnChart) {
                            tooltip = Graph.charts.get(i).getTooltip( $p.__int_cast(x1),  $p.__int_cast(y1));
                            break;
                        }
                    }
                }

                if (tooltip == null && Graph.activeChart != null) {
                    if (Graph.activeChart.constructor == ColumnChart) {
                        Graph.activeChart = null;
                        Graph.activeSeries.setActiveValueIndex(0);
                        Graph.activeSeries.setActive(false);
                        Graph.activeSeries = new Series();
                        $this_1.$self.draw();
                    } else if (Graph.activeChart.constructor == LineChart) {
                        tooltip = ( Graph.activeChart).switchActiveValueIndex(x1, y1);
                    } else if (Graph.activeChart.constructor == AreaChart) {
                        tooltip = ( Graph.activeChart).switchActiveValueIndex(x1, y1);
                    }
                }
            } else if (Graph.type == Chart.RADIAL_CHART) {
                var pie =  Graph.charts.get(Graph.charts.size() - 1);

                tooltip = pie.getTooltip( $p.__int_cast(x1),  $p.__int_cast(y1));
                if (tooltip == null) {
                    $this_1.$self.draw();
                }
            }
            if (tooltip != null) {
                $this_1.$self.draw();
                tooltip.draw();
            }
        } else if ($this_1.legend != null && $this_1.legend.layout.isInside(x1, y1)) {
            var series =  $this_1.legend.getSeriesByCoords(x1, y1);

            if (series != null) {
                $p.cursor($p.HAND);
            } else {
                $p.cursor($p.ARROW);
            }
        } else {
            $p.cursor($p.ARROW);
        }
    }
}
$p.addMethod($this_1, 'mouseMoveHandler', mouseMoveHandler$2);
$p.addMethod($this_1, 'convertNumber', convertNumber$0);
function setBeforeDrawFunction$1(func) {
    $this_1.beforeDraw = new UserEvent(   func  );
}
$p.addMethod($this_1, 'setBeforeDrawFunction', setBeforeDrawFunction$1);
function setAfterDrawFunction$1(func) {
    $this_1.afterDraw = new UserEvent(   func  );
}
$p.addMethod($this_1, 'setAfterDrawFunction', setAfterDrawFunction$1);
$p.addMethod($this_1, 'textWidth', textWidth$1);
function $constr_2(canvas, jQuery){
    $superCstr();

    $this_1.canvasId = "#"+canvas.id;
    $this_1.$ = jQuery;
    $this_1.animationIsComplete = false;

    //$p.smooth();

    Graph.charts = new $p.ArrayList();
    Graph.resources = new $p.HashMap();
    Graph.labels = null;

    Graph.activeSeries = new Series();
}

function $constr() {
    if(arguments.length === 2) {
        $constr_2.apply($this_1, arguments);
    } else $superCstr();
}
$constr.apply(null, arguments);
}
Graph.charts = null;
Graph.theme = null;
Graph.layout = null;
Graph.resources = null;
Graph.attributes = null;
Graph.labels = null;
Graph.type = 0;
Graph.TOP_ALIGN =  0;
Graph.RIGHT_ALIGN =  1;
Graph.BOTTOM_ALIGN =  2;
Graph.LEFT_ALIGN =  4;
Graph.chartNumber =  0;
Graph.activeSeries =  null;
Graph.activeChart =  null;
Graph.minDif =  40;
Graph.currentPosition =  0;
Graph.zoomCoeficient =  1;
Graph.maxZoom =  1;
Graph.averageAreaSize =  320000;
function max$1(array) {
    var max =  array[0];

    for (var i =  0;  i < array.length;  i++) {
        max = array[i] > max ? array[i] : max;
    }

    return max;
}
$p.addMethod(Graph, 'max', max$1);
function min$1(array) {
    var min =  array[0];

    for (var i =  0;  i < array.length;  i++) {
        min = array[i] < min ? array[i] : min;
    }

    return min;
}
$p.addMethod(Graph, 'min', min$1);
function min$2_2(x, y) {
    if (x < y) {
        return x;
    } else {
        return y;
    }
}
$p.addMethod(Graph, 'min', min$2_2);
function max$2_2(x, y) {
    if (x > y) {
        return x;
    } else {
        return y;
    }
}
$p.addMethod(Graph, 'max', max$2_2);
function convertNumber$0() {

}
$p.addMethod(Graph, 'convertNumber', convertNumber$0);
function textWidth$1(text) {
    return $p.parseFloat($p.textWidth(text));
}
$p.addMethod(Graph, 'textWidth', textWidth$1);
return Graph;
})();
$p.Graph = Graph;
var Layout = (function() {
    function Layout() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.X = 0;
        $this_1.Y = 0;
        $this_1.WIDTH = 0;
        $this_1.HEIGHT = 0;
        function getX$0() {
            return $this_1.X;
        }
        $p.addMethod($this_1, 'getX', getX$0);
        function getY$0() {
            return $this_1.Y;
        }
        $p.addMethod($this_1, 'getY', getY$0);
        function getWidth$0() {
            return $this_1.WIDTH;
        }
        $p.addMethod($this_1, 'getWidth', getWidth$0);
        function getHeight$0() {
            return $this_1.HEIGHT;
        }
        $p.addMethod($this_1, 'getHeight', getHeight$0);
        function setX$1(X) {
            $this_1.X = X;
        }
        $p.addMethod($this_1, 'setX', setX$1);
        function setY$1(Y) {
            $this_1.Y = Y;
        }
        $p.addMethod($this_1, 'setY', setY$1);
        function setWidth$1(WIDTH) {
            $this_1.WIDTH = WIDTH;
        }
        $p.addMethod($this_1, 'setWidth', setWidth$1);
        function setHeight$1(HEIGHT) {
            $this_1.HEIGHT = HEIGHT;
        }
        $p.addMethod($this_1, 'setHeight', setHeight$1);
        function isInside$2(x, y) {
            return ($this_1.X <= x && x <= $this_1.X + $this_1.WIDTH && $this_1.Y <= y && y <= $this_1.Y + $this_1.HEIGHT);
        }
        $p.addMethod($this_1, 'isInside', isInside$2);
        function $constr_4(X, Y, WIDTH, HEIGHT){
            $superCstr();

            $this_1.X = X;
            $this_1.Y = Y;
            $this_1.WIDTH = WIDTH;
            $this_1.HEIGHT = HEIGHT;
        }

        function $constr_0(){
            $superCstr();

            $this_1.X = 0;
            $this_1.Y = 0;
            $this_1.WIDTH = 0;
            $this_1.HEIGHT = 0;
        }

        function $constr() {
            if(arguments.length === 4) {
                $constr_4.apply($this_1, arguments);
            } else if(arguments.length === 0) {
                $constr_0.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Layout;
})();
$p.Layout = Layout;
var Legend = (function() {
    function Legend() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.names = null;
        $this_1.layout = null;
        $this_1.orientation = 0;
        $this_1.charts = null;
        function setLayout$1(layout) {
            $this_1.layout = layout;
        }
        $p.addMethod($this_1, 'setLayout', setLayout$1);
        function draw$0() {
            $p.textAlign($p.RIGHT);

            if ($this_1.orientation == Graph.RIGHT_ALIGN) {
                var dx =  0,dy =  0;

                var x =  $this_1.layout.getX();
                var y =  $this_1.layout.getY();
                var legendWidth =  $this_1.layout.getWidth();
                var legendHeight =  $this_1.layout.getHeight();

                $p.pushMatrix();
                $p.pushStyle();

                var textInterval =  15;

                var textHeight =  ($this_1.names.size() - 1) * Graph.theme.get("legend.textsize") + ($this_1.names.size() - 2) * textInterval;

                $p.translate(x + 20, y + (legendHeight - textHeight) / 2);
                $p.textSize(Graph.theme.get("legend.textsize"));
                $p.textAlign($p.LEFT);

                $p.fill(0);
                $p.stroke(0);

                var yPosition =  0;

                Graph.chartNumber = 0;

                for (var i =  0;  i < $this_1.charts.size();  i++) {
                    var chart =   $this_1.charts.get(i);

                    for (var j =  0;  j < chart.seriesQty();  j++, yPosition += textInterval + Graph.theme.get("legend.textsize"), Graph.chartNumber++) {
                        $p.pushStyle();
                        $p.fill(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));
                        $p.stroke(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));

                        if (chart.getSeries(j).getAttribute("enabled") == "1") {
                            $p.fill(125);
                            $p.stroke(125);
                        }
                        $this_1.$self.drawPictogram($this_1.charts.get(i), 0, yPosition - Graph.theme.get("legend.textsize") + 3);

                        $p.fill(0);
                        $p.stroke(0);

                        if (chart.getSeries(j).getAttribute("enabled") == "1") {
                            $p.fill(125);
                            $p.stroke(125);
                        }

                        $p.text(chart.getSeries(j).getAttribute("name"), Graph.theme.get("legend.textsize") + 10, yPosition);
                        $p.popStyle();
                    }
                }
                $p.popStyle();
                $p.popMatrix();

                Graph.chartNumber = 0;
            } else if ($this_1.orientation == Graph.BOTTOM_ALIGN) {
                var textWidth_ =  0;
                var seriesCount =  0;

                var legendWidth =  $this_1.layout.getWidth();
                var textHeight =  Graph.theme.get("legend.textsize") + 10;

                for (var i =  0;  i < $this_1.names.size();  i++) {
                    var nameTextWidth =  Graph.textWidth($this_1.names.get(i));

                    if (seriesCount * 50 + textWidth_ + nameTextWidth > legendWidth) {
                        textHeight += Graph.theme.get("legend.textsize") + 10;
                        seriesCount = 0;
                        textWidth_ = 0;
                    }

                    textWidth_ += nameTextWidth;
                    seriesCount++;
                    $p.text($this_1.names.get(i), $this_1.layout.getX() + textWidth_ + ((seriesCount - 1) * 50), $this_1.layout.getY() + textHeight);
                }
            }
        }
        $p.addMethod($this_1, 'draw', draw$0);
        function drawPictogram$3(chart, x, y) {
            var textSize =  Graph.theme.get("legend.textsize");

            if (chart.constructor == LineChart) {
                $p.strokeWeight(2);
                $p.line(x, y + (textSize / 2) + (textSize / 10), x + 15 + 4 * (textSize / 10), y + (textSize / 2) + (textSize / 10));
                $p.ellipse(x + (15 + 4 * (textSize / 10)) / 2, y + (textSize / 2) + (textSize / 10), 6 + (textSize / 10), 6 + (textSize / 10));
            } else if (chart.constructor == ColumnChart) {
                $p.strokeWeight(1);
                $p.rect(x, y + (textSize / 10), textSize, textSize);
            } else if (chart.constructor == AreaChart) {
                $p.strokeWeight(1);
                $p.beginShape();

                $p.vertex(x, y + (textSize / 2));
                $p.vertex(x + (textSize / 3), y);
                $p.vertex(x + (2 * textSize / 3), y + (textSize / 4));
                $p.vertex(x + textSize, y);
                $p.vertex(x + textSize, y + textSize);
                $p.vertex(x, y + textSize);
                $p.vertex(x, y + (textSize / 2));
                $p.endShape();
            }
        }
        $p.addMethod($this_1, 'drawPictogram', drawPictogram$3);
        function setOrientation$1(orientation) {
            $this_1.orientation = orientation;
        }
        $p.addMethod($this_1, 'setOrientation', setOrientation$1);
        function getOrientation$0() {
            return $this_1.orientation;
        }
        $p.addMethod($this_1, 'getOrientation', getOrientation$0);
        function getSeriesByCoords$2(x, y) {
            var series =  null;

            var legendX =  $this_1.layout.getX();
            var legendY =  $this_1.layout.getY();
            var legendWidth =  $this_1.layout.getWidth();
            var legendHeight =  $this_1.layout.getHeight();

            $p.pushMatrix();
            $p.pushStyle();

            var textInterval =  15;

            var textHeight =  ($this_1.names.size() - 1) * Graph.theme.get("legend.textsize") + ($this_1.names.size() - 2) * textInterval;

            $p.textSize(Graph.theme.get("legend.textsize"));
            $p.textAlign($p.LEFT);

            var addX =  legendX + 20;
            var addY =  legendY + (legendHeight - textHeight) / 2;

            var yPosition =  0;

            for (var i =  0;  i < $this_1.charts.size();  i++) {
                var chart =   $this_1.charts.get(i);

                var flag =  false;

                for (var j =  0;  j < chart.seriesQty();  j++, yPosition += textInterval + Graph.theme.get("legend.textsize"), Graph.chartNumber++) {
                    var text =  chart.getSeries(j).getAttribute("name");

                    if (addX + Graph.theme.get("legend.textsize") + 10 <= x && x <= addX + Graph.theme.get("legend.textsize") + 10 + Graph.textWidth(text)
                        && addY + yPosition - Graph.theme.get("legend.textsize") <= y && y <= addY + yPosition) {
                        series = chart.series[j];

                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    break;
                }
            }

            $p.popMatrix();
            $p.popStyle();

            return series;
        }
        $p.addMethod($this_1, 'getSeriesByCoords', getSeriesByCoords$2);
        function $constr_1(charts){
            $superCstr();

            $this_1.charts = charts;

            $this_1.names = new $p.ArrayList();
            if (Graph.type != Chart.RADIAL_CHART) {
                for (var i =  0;  i < charts.size();  i++) {
                    var chart =   charts.get(i);
                    for (var j =  0;  j < chart.seriesQty();  j++) {
                        $this_1.names.add(chart.getSeries(j).getAttribute("name"));
                    }
                }
            } else {

        }
        }

        function $constr() {
            if(arguments.length === 1) {
                $constr_1.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Legend;
})();
$p.Legend = Legend;
var ScrollBar = (function() {
    function ScrollBar() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.layout = null;
        $this_1.runnerWidth =  0;
        $this_1.runnerX =  0;
        $this_1.dragPosition =  0;
        function setLayout$1(layout) {
            $this_1.layout = layout;
        }
        $p.addMethod($this_1, 'setLayout', setLayout$1);
        function draw$0() {
            $p.noStroke();
            $p.fill(0,100,200,100);
            $p.rect($this_1.layout.getX(), $this_1.layout.getY(), $this_1.layout.getWidth(), $this_1.layout.getHeight());

            var left =  Graph.currentPosition / Graph.zoomCoeficient;
            var right =  (Graph.currentPosition + Graph.layout.getWidth()) / Graph.zoomCoeficient;

            $this_1.runnerX = $this_1.layout.getX() + left;
            $this_1.runnerWidth = right - left;

            $p.fill(0,100,200);
            $p.rect($this_1.layout.getX()+ left, $this_1.layout.getY(), right - left, $this_1.layout.getHeight());
            $p.stroke(1);
        }
        $p.addMethod($this_1, 'draw', draw$0);
        function getRunnerX$0() {
            return $this_1.runnerX;
        }
        $p.addMethod($this_1, 'getRunnerX', getRunnerX$0);
        function getRunnerWidth$0() {
            return $this_1.runnerWidth;
        }
        $p.addMethod($this_1, 'getRunnerWidth', getRunnerWidth$0);
        function setDragPosition$0() {
            $this_1.dragPosition = $this_1.runnerX;
        }
        $p.addMethod($this_1, 'setDragPosition', setDragPosition$0);
        function getDragPosition$0() {
            return $this_1.dragPosition;
        }
        $p.addMethod($this_1, 'getDragPosition', getDragPosition$0);
        function $constr_0(){
            $superCstr();

        }

        function $constr() {
            if(arguments.length === 0) {
                $constr_0.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return ScrollBar;
})();
$p.ScrollBar = ScrollBar;
var Series = (function() {
    function Series() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.points = null;
        $this_1.values = null;
        $this_1.attributes = null;
        $this_1.visible =  true;
        $this_1.active =  false;
        $this_1.activeValueIndex =  Number.MAX_VALUE;
        function setPoints$1(points) {
            $this_1.points =  points.clone();
        }
        $p.addMethod($this_1, 'setPoints', setPoints$1);
        function getValues$0() {
            return $this_1.values;
        }
        $p.addMethod($this_1, 'getValues', getValues$0);
        function getPoints$0() {
            return  $this_1.points;
        }
        $p.addMethod($this_1, 'getPoints', getPoints$0);
        function getAttribute$1(key) {
            if ($this_1.attributes.containsKey(key)) 
                return $this_1.attributes.get(key); else return new String();
        }
        $p.addMethod($this_1, 'getAttribute', getAttribute$1);
        function setAttribute$2(key, value) {
            $this_1.attributes.put(key, value);
        }
        $p.addMethod($this_1, 'setAttribute', setAttribute$2);
        function setVisible$1(flag) {
            $this_1.visible = flag;
        }
        $p.addMethod($this_1, 'setVisible', setVisible$1);
        function getVisible$0() {
            return $this_1.visible;
        }
        $p.addMethod($this_1, 'getVisible', getVisible$0);
        function setActive$1(flag) {
            $this_1.active = flag;
        }
        $p.addMethod($this_1, 'setActive', setActive$1);
        function getActive$0() {
            return $this_1.active;
        }
        $p.addMethod($this_1, 'getActive', getActive$0);
        function setActiveValueIndex$1(index) {
            $this_1.activeValueIndex = index;
        }
        $p.addMethod($this_1, 'setActiveValueIndex', setActiveValueIndex$1);
        function getActiveValueIndex$0() {
            return $this_1.activeValueIndex;
        }
        $p.addMethod($this_1, 'getActiveValueIndex', getActiveValueIndex$0);
        function $constr_0(){
            $superCstr();

            $this_1.points = new $p.HashMap();
            $this_1.values = $p.createJavaArray('float', [0]);
        }

        function $constr_2(values, attributes){
            $superCstr();

            $this_1.values = $p.createJavaArray('float', [values.length]);
            for (var i =  0;  i < values.length;  i++) {
                $this_1.values[i] = values[i];
            }
            $this_1.attributes = attributes;
        }

        function $constr() {
            if(arguments.length === 0) {
                $constr_0.apply($this_1, arguments);
            } else if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Series;
})();
$p.Series = Series;
var Theme = (function() {
    function Theme() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.properties = null;
        $this_1.colors = null;
        function get$1(text) {
            text = text.toLowerCase();

            if ($this_1.properties.containsKey(text)) {
                return $this_1.properties.get(text);
            }

            if ($p.__contains(text,"freespace")) {
                return 10;
            } else if ($p.__contains(text,"textsize")) {
                return 15;
            } else if ($p.__contains(text,"margin")) {
                return 15;
            }

            return 0;
        }
        $p.addMethod($this_1, 'get', get$1);
        function getColor$1(index) {
            return $this_1.colors.get(index);
        }
        $p.addMethod($this_1, 'getColor', getColor$1);
        function cutHex$1(h) {
            return (h.charAt(0) == "#") ? h.substring(1, 7) : h;
        }
        $p.addMethod($this_1, 'cutHex', cutHex$1);
        function getColorR$1(index) {
            var add =  index / $this_1.colors.size();

            var ans =  $p.parseInt(($this_1.$self.cutHex($this_1.$self.getColor(index % $this_1.colors.size()))).substring(0, 2), 16);

            add = add * (255 - ans) / 2;

            return ans + add;
        }
        $p.addMethod($this_1, 'getColorR', getColorR$1);
        function getColorG$1(index) {
            var add =  index / $this_1.colors.size();

            var ans =  $p.parseInt(($this_1.$self.cutHex($this_1.$self.getColor(index % $this_1.colors.size()))).substring(2, 4), 16);

            add = add * (255 - ans) / 2;

            return ans + add;
        }
        $p.addMethod($this_1, 'getColorG', getColorG$1);
        function getColorB$1(index) {
            var add =  index / $this_1.colors.size();

            var ans =  $p.parseInt(($this_1.$self.cutHex($this_1.$self.getColor(index % $this_1.colors.size()))).substring(4, 6), 16);

            add = add * (255 - ans) / 2;

            return ans + add;
        }
        $p.addMethod($this_1, 'getColorB', getColorB$1);
        function $constr_0(){
            $superCstr();

            $this_1.colors = new $p.ArrayList();
            $this_1.colors.add("#058DC7");
            $this_1.colors.add("#50B432");
            $this_1.colors.add("#ED561B");
            $this_1.colors.add("#DDDF00");
            $this_1.colors.add("#24CBE5");
            $this_1.colors.add("#64E572");
            $this_1.colors.add("#FF9655");
            $this_1.colors.add("#6AF9C4");

            $this_1.properties = new $p.HashMap();
            $this_1.properties.put("margin.left",  5);
            $this_1.properties.put("margin.top",  5);
            $this_1.properties.put("margin.right",  5);
            $this_1.properties.put("margin.bottom",  5);

            $this_1.properties.put("legend.textsize",  12 + ($p.width*$p.height/Graph.averageAreaSize));
            $this_1.properties.put("axis.textsize",  12 + ($p.width*$p.height/Graph.averageAreaSize));

            $this_1.properties.put("caption.textsize",  18 + ($p.width*$p.height/Graph.averageAreaSize));

            $this_1.properties.put("piechart.labels.textsize",  12 + ($p.width*$p.height/Graph.averageAreaSize));
        }

        function $constr() {
            if(arguments.length === 0) {
                $constr_0.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Theme;
})();
$p.Theme = Theme;
var Tooltip = (function() {
    function Tooltip() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.text_ = null;
        $this_1.x = 0;
        $this_1.y = 0;
        $this_1.width_ = 0;
        function draw$0() {
            var space =   (0.2 * Graph.textWidth($this_1.text_) > 20 ? 0.2 * Graph.textWidth($this_1.text_) : 20);
            var tooltipX =  0,tooltipY =  0,tooltipWidth =  0,tooltipHeight =  0;
            var textWidth_ =  Graph.textWidth($this_1.text_);
            if ($this_1.x - Graph.layout.getX() > textWidth_ + space) {
                tooltipX = $this_1.x - textWidth_ - space - 10;
                tooltipWidth = textWidth_ + 10;
                tooltipY = $this_1.y - (Graph.theme.get("tooltip.textsize") / 2) - 5;
                tooltipHeight = Graph.theme.get("tooltip.textsize") + 10;
            } else {
                tooltipX = $this_1.x + $this_1.width_ + space;
                tooltipWidth = textWidth_ + 20;
                tooltipY = $this_1.y - (Graph.theme.get("tooltip.textsize") / 2) - 5;
                tooltipHeight = Graph.theme.get("tooltip.textsize") + 10;
            }

            $p.textAlign($p.LEFT);
            $p.fill(255, 255, 255);

            $p.stroke(0);
            $p.rect(tooltipX, tooltipY, tooltipWidth, tooltipHeight);
            $p.fill(0);
            $p.text($this_1.text_, tooltipX + 10, tooltipY + Graph.theme.get("tooltip.textsize") + 5);
        }
        $p.addMethod($this_1, 'draw', draw$0);
        function $constr_3(text_, x, y){
            $constr(text_, x, y, 0);
        }

        function $constr_4(text_, x, y, width_){
            $superCstr();

            $this_1.text_ = text_;
            $this_1.x = x;
            $this_1.y = y;
            $this_1.width_ = width_;
        }

        function $constr() {
            if(arguments.length === 3) {
                $constr_3.apply($this_1, arguments);
            } else if(arguments.length === 4) {
                $constr_4.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Tooltip;
})();
$p.Tooltip = Tooltip;
var UserEvent = (function() {
    function UserEvent() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.func = null;
        $this_1.flag =  true;
        function fire$0() {
            $this_1.func(); 
            $this_1.flag = false;
        }
        $p.addMethod($this_1, 'fire', fire$0);
        function getFlag$0() {
            return $this_1.flag;
        }
        $p.addMethod($this_1, 'getFlag', getFlag$0);
        function $constr_1(func){
            $superCstr();

            $this_1.func = func;
        }

        function $constr() {
            if(arguments.length === 1) {
                $constr_1.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return UserEvent;
})();
$p.UserEvent = UserEvent;
var AreaChart = (function() {
    function AreaChart() {
        var $this_1 = this;
        var $super = {
            $upcast: $this_1
        };
        function $superCstr(){
            Chart.apply($super,arguments);
            if(!('$self' in $super)) $p.extendClassChain($super)
                }
        $this_1.zeroPosition =  0;
        $this_1.smooth_value =   0;
        $this_1.transparent =   0.5;
        function draw$2(frame, framesCount) {
            var showValues =  Graph.attributes.containsKey("showvalues") && $p.__equals(Graph.attributes.get("showvalues"),"1") ? true : false;

            var zoomCoeficient =  Graph.zoomCoeficient;

            var xLimit =  Graph.layout.getX() + (Graph.layout.getWidth() / framesCount * frame);

            $p.strokeWeight(2);
            var xMax =  Graph.layout.getX() + Graph.layout.getWidth();
            var xMin =  Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++, Graph.chartNumber++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =   ($this_1.series[j].getPoints()).clone();

                var size =  points.get("length");

                for (var i =  0;  i < size;  i++) {
                    var x1 =  points.get($p.str(i) + ".x") - Graph.layout.getX();
                    x1 *= zoomCoeficient;
                    x1 += Graph.layout.getX();
                    x1 -= Graph.currentPosition;
                    points.put($p.str(i) + ".x", x1);
                }
                var shapeMaxX =  -1,shapeMinX =  10000000;
                $p.fill(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber), 200);
                $p.noStroke();
                $p.beginShape();

                for (var i =  0;  i < size - 1;  i++) {
                    var x1 =  points.get($p.str(i) + ".x");
                    var y1 =  points.get($p.str(i) + ".y");

                    var x0 =  i > 0 ? points.get($p.str(i - 1) + ".x") : x1;
                    var y0 =  i > 0 ? points.get($p.str(i - 1) + ".y") : y1;

                    var x2 =  points.get($p.str(i + 1) + ".x");
                    var y2 =  points.get($p.str(i + 1) + ".y");

                    var x3 =  i < size - 2 ? points.get($p.str(i + 2) + ".x") : x2;
                    var y3 =  i < size - 2 ? points.get($p.str(i + 2) + ".y") : y2;

                    var controlPoints =  $this_1.$self.getControlPoints(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2), new Point(x3, y3), $this_1.smooth_value);

                    var p1 =  new Point(x1, y1);
                    var p2 =  controlPoints.get(0);
                    var p3 =  controlPoints.get(1);
                    var p4 =  new Point(x2, y2);

                    var steps =  60;

                    var flag =  false;

                    for (var k =  0;  k < steps;  k++) {
                        var x =  $p.bezierPoint(p1.getX(), p2.getX(), p3.getX(), p4.getX(),  k / steps);

                        if (x > xMax || x > xLimit) {
                            flag = true;
                            break;
                        } else if (x < xMin) {
                            continue;
                        }
                        var y =  $p.bezierPoint(p1.getY(), p2.getY(), p3.getY(), p4.getY(),  k / steps);

                        $p.vertex(x, y);

                        shapeMaxX = x > shapeMaxX ? x : shapeMaxX;
                        shapeMinX = x < shapeMinX ? x : shapeMinX;
                    }
                    if (xMin <=p4.getX() && p4.getX() <= xMax && p4.getX() <= xLimit) {
                        $p.vertex(p4.getX(), p4.getY());

                        shapeMaxX = p4.getX() > shapeMaxX ? p4.getX() : shapeMaxX;
                        shapeMinX = p4.getX() < shapeMinX ? p4.getX() : shapeMinX;
                    }
                    if (flag) {
                        break;
                    }

                    $p.textAlign($p.CENTER);
                    if (xMin <= x1 && x1 <= xMax) {
                        if ($this_1.series[j].getActive()) {
                            if ($this_1.series[j].getActiveValueIndex() == i) {
                                $p.ellipse(x1, y1, 12, 12);
                            }
                        }

                        if (showValues) {
                            var temp =  $this_1.series[j].getValues()[i];
                            var labelText =  $p.str(temp);

                            while (true) {
                                var c =  labelText.charAt(labelText.length - 1);
                                if (c == (new $p.Character('0')) || c == (new $p.Character('.'))) {
                                    labelText = labelText.substring(0, labelText.length - 1);
                                } else {
                                    break;
                                }
                                if (c == (new $p.Character('.'))) {
                                    break;
                                }
                            }

                            $p.text(labelText, x1, y1 - 10);
                        }
                    }
                }

                if (shapeMaxX != -1 && shapeMinX != 10000000) {
                    $p.vertex(shapeMaxX, $this_1.zeroPosition);
                    $p.vertex(shapeMinX, $this_1.zeroPosition);
                }

                $p.endShape();
            }

            $p.strokeWeight(1);
        }
        $p.addMethod($this_1, 'draw', draw$2);
        function getControlPoints$5(p0, p1, p2, p3, smooth_value) {
            var x0 =  p0.getX(),y0 =  p0.getY(),x1 =  p1.getX(),y1 =  p1.getY(),x2 =  p2.getX(),y2 =  p2.getY(),x3 =  p3.getX(),y3 =  p3.getY();

            var xc1 =   ((x0 + x1) / 2.0);
            var yc1 =   ((y0 + y1) / 2.0);
            var xc2 =   ((x1 + x2) / 2.0);
            var yc2 =   ((y1 + y2) / 2.0);
            var xc3 =   ((x2 + x3) / 2.0);
            var yc3 =   ((y2 + y3) / 2.0);

            var len1 =   Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
            var len2 =   Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            var len3 =   Math.sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));

            var k1 =  len1 / (len1 + len2);
            var k2 =  len2 / (len2 + len3);

            var xm1 =  xc1 + (xc2 - xc1) * k1;
            var ym1 =  yc1 + (yc2 - yc1) * k1;

            var xm2 =  xc2 + (xc3 - xc2) * k2;
            var ym2 =  yc2 + (yc3 - yc2) * k2;

            var ctrl1_x =  xm1 + (xc2 - xm1) * smooth_value + x1 - xm1;
            var ctrl1_y =  ym1 + (yc2 - ym1) * smooth_value + y1 - ym1;

            var ctrl2_x =  xm2 + (xc2 - xm2) * smooth_value + x2 - xm2;
            var ctrl2_y =  ym2 + (yc2 - ym2) * smooth_value + y2 - ym2;

            var ans =  new $p.ArrayList();

            ans.add(new Point(ctrl1_x, ctrl1_y));
            ans.add(new Point(ctrl2_x, ctrl2_y));

            return ans;
        }
        $p.addMethod($this_1, 'getControlPoints', getControlPoints$5);
        function preprocessing$1(layoutParameters) {
            var minY =  layoutParameters.get("graph.preprocessing.minY");
            var maxY =  layoutParameters.get("graph.preprocessing.maxY");

            var startY =  layoutParameters.get("graph.preprocessing.startY");
            var endY =  layoutParameters.get("graph.preprocessing.endY");

            var startX =  layoutParameters.get("graph.preprocessing.startX");
            var endX =  layoutParameters.get("graph.preprocessing.endX");

            $this_1.zeroPosition = Graph.layout.getHeight() - layoutParameters.get("graph.preprocessing.zero.position.y") + 2 * Graph.layout.getY();

            var canvasInnerSpaceWidth =  layoutParameters.get("graph.preprocessing.canvasInnerSpaceWidth");

            for (var i =  0;  i < $this_1.series.length;  i++) {
                if (!$this_1.series[i].getVisible()) {
                    continue;
                }

                var values =  $this_1.series[i].getValues();

                var tY =  0,tX =  0;
                var tJ =  0;

                var points =  new $p.HashMap(); 
                for (var j =  0;  j < values.length;  j++) {
                    var y =  $p.map(values[j], minY, maxY, startY, endY);
                    var x =  $p.map(j, 0, values.length - 1, startX + canvasInnerSpaceWidth, endX - canvasInnerSpaceWidth);

                    points.put($p.str(j) + ".x", x);
                    points.put($p.str(j) + ".y", y);

                    tY = y;
                    tX = x;
                    tJ = j + 1;
                }

                points.put($p.str(tJ) + ".x", tX);
                points.put($p.str(tJ) + ".y", tY);

                points.put("length",  values.length + 1);

                $this_1.series[i].setPoints(points);
            }
        }
        $p.addMethod($this_1, 'preprocessing', preprocessing$1);
        function invertY$0() {
            var marginTop =  Graph.layout.getY();
            var canvasHeight =  Graph.layout.getHeight();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =  $this_1.series[j].getPoints();
                var length =  points.get("length");

                for (var i =  0;  i < length;  i++) {
                    var y =  points.get($p.str(i) + ".y") - marginTop;
                    y = canvasHeight - y + marginTop;
                    points.put($p.str(i) + ".y", y);
                }

                $this_1.series[j].setPoints(points);
            }
        }
        $p.addMethod($this_1, 'invertY', invertY$0);
        function getValueByCursor$2(mouseX, mouseY) {
            return false;
        }
        $p.addMethod($this_1, 'getValueByCursor', getValueByCursor$2);
        function getTooltip$2(mouseX, mouseY) {
            var pointX =  0,pointY =  0;
            var text =  new String();

            var zoomCoeficient =  Graph.zoomCoeficient;

            var xMax =  Graph.layout.getX() + Graph.layout.getWidth();
            var xMin =  Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =   ($this_1.series[j].getPoints()).clone();

                var size =  points.get("length");

                for (var i =  0;  i < size;  i++) {
                    var x1 =  points.get($p.str(i) + ".x") - Graph.layout.getX();
                    x1 *= zoomCoeficient;
                    x1 += Graph.layout.getX();
                    x1 -= Graph.currentPosition;
                    points.put($p.str(i) + ".x", x1);
                }

                for (var i =  0;  i < size - 1;  i++) {
                    var x1 =  points.get($p.str(i) + ".x");
                    var y1 =  points.get($p.str(i) + ".y");

                    var x0 =  i > 0 ? points.get($p.str(i - 1) + ".x") : x1;
                    var y0 =  i > 0 ? points.get($p.str(i - 1) + ".y") : y1;

                    var x2 =  points.get($p.str(i + 1) + ".x");
                    var y2 =  points.get($p.str(i + 1) + ".y");

                    var x3 =  i < size - 2 ? points.get($p.str(i + 2) + ".x") : x2;
                    var y3 =  i < size - 2 ? points.get($p.str(i + 2) + ".y") : y2;

                    var controlPoints =  $this_1.$self.getControlPoints(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2), new Point(x3, y3), $this_1.smooth_value);

                    var p1 =  new Point(x1, y1);
                    var p2 =  controlPoints.get(0);
                    var p3 =  controlPoints.get(1);
                    var p4 =  new Point(x2, y2);

                    var steps =  20;

                    for (var k =  0;  k < steps;  k++) {
                        var x =  $p.bezierPoint(p1.getX(), p2.getX(), p3.getX(), p4.getX(),  k / steps);
                        if (x > xMax) {
                            break;
                        } else if (x < xMin) {
                            continue;
                        }
                        var y =  $p.bezierPoint(p1.getY(), p2.getY(), p3.getY(), p4.getY(),  k / steps);

                        if (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Graph.minDif) {
                            Graph.minDif =  (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2));

                            Graph.activeSeries.setActive(false);

                            Graph.activeSeries = $this_1.series[j];

                            Graph.activeSeries.setActive(true);

                            Graph.activeChart = $this_1.$self;

                            if (Math.abs(x1 - mouseX) <= Math.abs(x2 - mouseX)) {
                                Graph.activeSeries.setActiveValueIndex(i);
                                pointX = x1;
                                pointY = y1;

                                text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i] + ": " + $this_1.series[j].getValues()[i];
                            } else {
                                Graph.activeSeries.setActiveValueIndex(i + 1);
                                pointX = x2;
                                pointY = y2;
                                text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i + 1] + ": " + $this_1.series[j].getValues()[i + 1];
                            }
                        }
                    }
                }
            }

            if (pointX == 0 && pointY == 0) {
                return null;
            } else {
                return new Tooltip(text, pointX, pointY);
            }
        }
        $p.addMethod($this_1, 'getTooltip', getTooltip$2);
        function zoom$1(coeficient) {

        }
        $p.addMethod($this_1, 'zoom', zoom$1);
        function switchActiveValueIndex$2(mouseX, mouseY) {
            var pointX =  0,pointY =  0;
            var text =  new String();

            var minDif =  Graph.layout.getWidth() + Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if ($this_1.series[j].getActive() && $this_1.series[j].getVisible()) {
                    var points =   ($this_1.series[j].getPoints()).clone();
                    var size =  points.get("length");

                    for (var i =  0;  i < size - 1;  i++) {
                        var x1 =  points.get($p.str(i) + ".x");
                        var y1 =  points.get($p.str(i) + ".y");

                        if (Math.abs(x1 - mouseX) <= minDif) {
                            Graph.activeSeries.setActiveValueIndex(i);
                            pointX = x1;
                            pointY = y1;

                            text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i] + ": " + $this_1.series[j].getValues()[i];

                            $this_1.series[j].setActiveValueIndex(i);

                            minDif = Math.abs(x1 - mouseX);
                        }
                    }
                    return new Tooltip(text, pointX, pointY);
                }
            }
            return null;
        }
        $p.addMethod($this_1, 'switchActiveValueIndex', switchActiveValueIndex$2);
        function $constr_2(attributes, series){
            $superCstr();

            $this_1.parameters = attributes; 
            $this_1.series = series;

            $this_1.type = Chart.VERTICAL_CHART;

            if ($this_1.parameters.containsKey("isspline")) {
                if ($p.__equals($this_1.parameters.get("isspline"),"1")) {
                    $this_1.smooth_value =  0.8;
                }
            }
        }

        function $constr() {
            if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    $p.extendStaticMembers(AreaChart, Chart);
    $p.extendInterfaceMembers(AreaChart, Zoomable);
    AreaChart.$base = Chart;
    AreaChart.$interfaces = [Zoomable];
    return AreaChart;
})();
$p.AreaChart = AreaChart;
var ColumnChart = (function() {
    function ColumnChart() {
        var $this_1 = this;
        var $super = {
            $upcast: $this_1
        };
        function $superCstr(){
            Chart.apply($super,arguments);
            if(!('$self' in $super)) $p.extendClassChain($super)
                }
        $this_1.zeroPosition =  0;
        function draw$2(frame, framesCount) {
            $p.pushStyle();

            var showValues =  Graph.attributes.containsKey("showvalues") && $p.__equals(Graph.attributes.get("showvalues"),"1") ? true : false;

            $p.noStroke();

            for (var j =  0;  j < $this_1.series.length;  j++, Graph.chartNumber++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                $p.fill(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));

                var points =  $this_1.series[j].getPoints();
                var length =  points.get("length");

                for (var i =  0;  i < length;  i++) {
                    var x =  points.get($p.str(i) + ".x");
                    var y =  points.get($p.str(i) + ".y");
                    var w =  points.get($p.str(i) + ".width");
                    var h =  points.get($p.str(i) + ".height");

                    h *=  frame / framesCount;

                    $p.rect(x, y, w, h);

                    if ($this_1.series[j].getActive()) {
                        if ($this_1.series[j].getActiveValueIndex() == i) {
                            $p.pushStyle();
                            $p.fill(Graph.theme.getColorR(Graph.chartNumber) + 60, Graph.theme.getColorG(Graph.chartNumber) + 20, Graph.theme.getColorB(Graph.chartNumber) + 20);
                            $p.rect(x, y, w, h);
                            $p.popStyle();
                        }
                    }

                    if (showValues) {
                        $p.fill(0);
                        $p.textAlign($p.CENTER);
                        var x1 =  w / 2 + x;
                        var y1 =  y + h - 10;

                        var temp =  $this_1.series[j].getValues()[i];
                        var text =  $p.str(temp);

                        while (true) {
                            var c =  text.charAt(text.length - 1);
                            if (c == (new $p.Character('0')) || c == (new $p.Character('.'))) {
                                text = text.substring(0, text.length - 1);
                            } else {
                                break;
                            }
                            if (c == (new $p.Character('.'))) {
                                break;
                            }
                        }

                        if (y1 - 15 <= Graph.layout.getY()) {
                            y1 = y + h + 20;
                        }

                        text(text, x1, y1);
                        $p.fill(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));
                    }
                }
            }

            $p.stroke(0);

            $p.popStyle();
        }
        $p.addMethod($this_1, 'draw', draw$2);
        function preprocessing$1(layoutParameters) {
            var minY =  layoutParameters.get("graph.preprocessing.minY");
            var maxY =  layoutParameters.get("graph.preprocessing.maxY");

            var startY =  layoutParameters.get("graph.preprocessing.startY");
            var endY =  layoutParameters.get("graph.preprocessing.endY");

            var startX =  layoutParameters.get("graph.preprocessing.startX");
            var endX =  layoutParameters.get("graph.preprocessing.endX");

            $this_1.zeroPosition = layoutParameters.get("graph.preprocessing.zero.position.y");

            var plotWidth =  Graph.layout.getWidth() / ($this_1.$self.seriesLength());

            var spaceWidth =  plotWidth / 10; 
            var columnWidth =  0; 
            var addX =  0;
            var points =  new $p.HashMap();

            var seriesQty =  0;

            for (var i =  0;  i < $this_1.series.length;  i++) {
                if ($this_1.series[i].getVisible()) {
                    seriesQty++;
                }
            }

            columnWidth = (plotWidth - (2 * spaceWidth)) / seriesQty;

            var space =  plotWidth/80;

            for (var i =  0;  i < $this_1.series.length;  i++) {
                if (!$this_1.series[i].getVisible()) {
                    continue;
                }

                var values =  $this_1.series[i].getValues();

                for (var j =  0;  j < values.length;  j++) {
                    var y =  $p.map(values[j], minY, maxY, startY, endY);
                    var x =  $p.map(j, 0, values.length, startX, endX);

                    x += addX + spaceWidth;

                    points.put($p.str(j) + ".x", x + space);
                    points.put($p.str(j) + ".width",  columnWidth - (2 * space));

                    if (y != $this_1.zeroPosition) {
                        points.put($p.str(j) + ".y", y > $this_1.zeroPosition ? $this_1.zeroPosition + 1 : $this_1.zeroPosition - 2);
                        points.put($p.str(j) + ".height", y > $this_1.zeroPosition ? y - $this_1.zeroPosition - 1 : y - $this_1.zeroPosition + 2);
                    } else {
                        points.put($p.str(j) + ".y", $this_1.zeroPosition);
                        points.put($p.str(j) + ".height", y - $this_1.zeroPosition);
                    }

                    points.put($p.str(j) + ".height", y > $this_1.zeroPosition ? y - $this_1.zeroPosition - 1 : y - $this_1.zeroPosition + 2);
                }

                points.put("length",  values.length);

                $this_1.series[i].setPoints(points);

                addX += columnWidth;
            }
        }
        $p.addMethod($this_1, 'preprocessing', preprocessing$1);
        function invertY$0() {
            $this_1.zeroPosition = Graph.layout.getHeight() - $this_1.zeroPosition + 2 * Graph.layout.getY();

            var temp =  Graph.layout.getY() + Graph.layout.getHeight();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =  $this_1.series[j].getPoints();
                var length =  points.get("length");

                for (var i =  0;  i < length;  i++) {
                    var y =  points.get($p.str(i) + ".y");
                    var h =  points.get($p.str(i) + ".height");
                    if (h < 0) {
                        points.put($p.str(i) + ".y", Graph.layout.getHeight() - y + 2 * Graph.layout.getY());
                        points.put($p.str(i) + ".height", -h);
                    } else {
                        points.put($p.str(i) + ".y", Graph.layout.getHeight() - y + 2 * Graph.layout.getY());
                        points.put($p.str(i) + ".height", -h);
                    }
                }
                $this_1.series[j].setPoints(points);
            }
        }
        $p.addMethod($this_1, 'invertY', invertY$0);
        function getTooltip$2(mouseX, mouseY) {
            var colX =  0,colY =  0,colWidth =  0;
            var text =  new String();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }
                var points =  $this_1.series[j].getPoints();

                var length =  points.get("length");

                var flag =  false;

                for (var i =  0;  i < length;  i++) {
                    var x =  points.get($p.str(i) + ".x");
                    var y =  points.get($p.str(i) + ".y");
                    var width_ =  points.get($p.str(i) + ".width");
                    var height_ =  points.get($p.str(i) + ".height");

                    if (height_ < 0) {
                        y += height_;
                        height_ = -height_;
                    }

                    if (x <= mouseX && mouseX <= x + width_ && y <= mouseY && mouseY <= y + height_) {
                        Graph.activeSeries.setActive(false);

                        Graph.activeSeries = $this_1.series[j];

                        Graph.activeSeries.setActive(true);

                        Graph.activeSeries.setActiveValueIndex(i);

                        Graph.activeChart = $this_1.$self;

                        colX = x;
                        colY = y;
                        colWidth = width_;
                        text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i] + ": " + $this_1.series[j].getValues()[i];
                        flag = true;
                        break;
                    }
                }

                if (flag) {
                    break;
                }
            }

            if (colX == 0 && colY == 0) {
                return null;
            } else {
                return new Tooltip(text, colX, colY, colWidth);
            }
        }
        $p.addMethod($this_1, 'getTooltip', getTooltip$2);
        function $constr_2(attributes, series){
            $superCstr();

            $this_1.parameters = attributes;
            $this_1.series = series;

            $this_1.type = Chart.VERTICAL_CHART;
        }

        function $constr() {
            if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    $p.extendStaticMembers(ColumnChart, Chart);
    ColumnChart.$base = Chart;
    return ColumnChart;
})();
$p.ColumnChart = ColumnChart;
var LineChart = (function() {
    function LineChart() {
        var $this_1 = this;
        var $super = {
            $upcast: $this_1
        };
        function $superCstr(){
            Chart.apply($super,arguments);
            if(!('$self' in $super)) $p.extendClassChain($super)
                }
        $this_1.smooth_value =   0;
        function draw$2(frame, framesCount) {
            $p.pushStyle();

            var showValues =  Graph.attributes.containsKey("showvalues") && $p.__equals(Graph.attributes.get("showvalues"),"1") ? true : false;

            var xLimit =  Graph.layout.getX() + (Graph.layout.getWidth() / framesCount * frame);

            var zoomCoeficient =  Graph.zoomCoeficient;

            var xMax =  Graph.layout.getX() + Graph.layout.getWidth();
            var xMin =  Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++, Graph.chartNumber++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =   ($this_1.series[j].getPoints()).clone();

                var size =  points.get("length");

                for (var i =  0;  i < size;  i++) {
                    var x1 =  points.get($p.str(i) + ".x") - Graph.layout.getX();
                    x1 *= zoomCoeficient;
                    x1 += Graph.layout.getX();
                    x1 -= Graph.currentPosition;
                    points.put($p.str(i) + ".x", x1);
                }

                $p.noFill();
                $p.strokeWeight(2);

                if ($this_1.series[j].getActive()) {
                    $p.strokeWeight(4);
                }
                $p.stroke(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));

                $p.beginShape();

                for (var i =  0;  i < size - 1;  i++) {
                    var x1 =  points.get($p.str(i) + ".x");
                    var y1 =  points.get($p.str(i) + ".y");

                    var x0 =  i > 0 ? points.get($p.str(i - 1) + ".x") : x1;
                    var y0 =  i > 0 ? points.get($p.str(i - 1) + ".y") : y1;

                    var x2 =  points.get($p.str(i + 1) + ".x");
                    var y2 =  points.get($p.str(i + 1) + ".y");

                    var x3 =  i < size - 2 ? points.get($p.str(i + 2) + ".x") : x2;
                    var y3 =  i < size - 2 ? points.get($p.str(i + 2) + ".y") : y2;

                    var controlPoints =  $this_1.$self.getControlPoints(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2), new Point(x3, y3), $this_1.smooth_value);

                    var p1 =  new Point(x1, y1);
                    var p2 =  controlPoints.get(0);
                    var p3 =  controlPoints.get(1);
                    var p4 =  new Point(x2, y2);

                    var steps =  80;

                    var flag =  false;

                    for (var k =  0;  k < steps;  k++) {
                        var x =  $p.bezierPoint(p1.getX(), p2.getX(), p3.getX(), p4.getX(),  k / steps);
                        if (x > xMax || x > xLimit) {
                            flag = true;
                            break;
                        }
                        if (x < xMin) {
                            continue;
                        }
                        var y =  $p.bezierPoint(p1.getY(), p2.getY(), p3.getY(), p4.getY(),  k / steps);

                        $p.vertex(x, y);
                    }

                    if (xMin <=p4.getX() && p4.getX() <= xMax && p4.getX() <= xLimit) {
                        $p.vertex(p4.getX(), p4.getY());
                    }

                    if (flag) {
                        break;
                    }

                    $p.pushStyle();
                    $p.textAlign($p.CENTER);
                    if (xMin <= x1 && x1 <= xMax) {
                        $p.fill(Graph.theme.getColorR(Graph.chartNumber), Graph.theme.getColorG(Graph.chartNumber), Graph.theme.getColorB(Graph.chartNumber));
                        $p.strokeWeight(1);
                        $p.stroke(255);

                        $p.ellipse(x1, y1, 8, 8);

                        if ($this_1.series[j].getActive()) {
                            if ($this_1.series[j].getActiveValueIndex() == i) {
                                $p.ellipse(x1, y1, 12, 12);
                            }
                        }

                        if (showValues) {
                            var temp =  $this_1.series[j].getValues()[i];
                            var labelText =  $p.str(temp);

                            while (true) {
                                var c =  labelText.charAt(labelText.length - 1);
                                if (c == (new $p.Character('0')) || c == (new $p.Character('.'))) {
                                    labelText = labelText.substring(0, labelText.length - 1);
                                } else {
                                    break;
                                }
                                if (c == (new $p.Character('.'))) {
                                    break;
                                }
                            }

                            $p.text(labelText, x1, y1 - 10);
                        }
                    }
                    $p.popStyle();
                }
                $p.endShape();
            }

            $p.popStyle();
        }
        $p.addMethod($this_1, 'draw', draw$2);
        function getControlPoints$5(p0, p1, p2, p3, smooth_value) {
            var x0 =  p0.getX(),y0 =  p0.getY(),x1 =  p1.getX(),y1 =  p1.getY(),x2 =  p2.getX(),y2 =  p2.getY(),x3 =  p3.getX(),y3 =  p3.getY();

            var xc1 =   ((x0 + x1) / 2.0);
            var yc1 =   ((y0 + y1) / 2.0);
            var xc2 =   ((x1 + x2) / 2.0);
            var yc2 =   ((y1 + y2) / 2.0);
            var xc3 =   ((x2 + x3) / 2.0);
            var yc3 =   ((y2 + y3) / 2.0);

            var len1 =   Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));
            var len2 =   Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            var len3 =   Math.sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));

            var k1 =  len1 / (len1 + len2);
            var k2 =  len2 / (len2 + len3);

            var xm1 =  xc1 + (xc2 - xc1) * k1;
            var ym1 =  yc1 + (yc2 - yc1) * k1;

            var xm2 =  xc2 + (xc3 - xc2) * k2;
            var ym2 =  yc2 + (yc3 - yc2) * k2;

            var ctrl1_x =  xm1 + (xc2 - xm1) * smooth_value + x1 - xm1;
            var ctrl1_y =  ym1 + (yc2 - ym1) * smooth_value + y1 - ym1;

            var ctrl2_x =  xm2 + (xc2 - xm2) * smooth_value + x2 - xm2;
            var ctrl2_y =  ym2 + (yc2 - ym2) * smooth_value + y2 - ym2;

            var ans =  new $p.ArrayList();

            ans.add(new Point(ctrl1_x, ctrl1_y));
            ans.add(new Point(ctrl2_x, ctrl2_y));

            return ans;
        }
        $p.addMethod($this_1, 'getControlPoints', getControlPoints$5);
        function preprocessing$1(layoutParameters) {
            var minY =  layoutParameters.get("graph.preprocessing.minY");
            var maxY =  layoutParameters.get("graph.preprocessing.maxY");

            var startY =  layoutParameters.get("graph.preprocessing.startY");
            var endY =  layoutParameters.get("graph.preprocessing.endY");

            var startX =  layoutParameters.get("graph.preprocessing.startX");
            var endX =  layoutParameters.get("graph.preprocessing.endX");

            var canvasInnerSpaceWidth =  layoutParameters.get("graph.preprocessing.canvasInnerSpaceWidth");

            for (var i =  0;  i < $this_1.series.length;  i++) {
                if (!$this_1.series[i].getVisible()) {
                    continue;
                }

                var values =  $this_1.series[i].getValues();

                var tY =  0,tX =  0;
                var tJ =  0;

                var points =  new $p.HashMap(); 
                for (var j =  0;  j < values.length;  j++) {
                    var y =  $p.map(values[j], minY, maxY, startY, endY);
                    var x =  $p.map(j, 0, values.length - 1, startX + canvasInnerSpaceWidth, endX - canvasInnerSpaceWidth);

                    points.put($p.str(j) + ".x", x);
                    points.put($p.str(j) + ".y", y);

                    tY = y;
                    tX = x;
                    tJ = j + 1;
                }

                points.put($p.str(tJ) + ".x", tX);
                points.put($p.str(tJ) + ".y", tY);

                points.put("length",  values.length + 1);

                $this_1.series[i].setPoints(points);
            }
        }
        $p.addMethod($this_1, 'preprocessing', preprocessing$1);
        function invertY$0() {
            var marginTop =  Graph.layout.getY();
            var canvasHeight =  Graph.layout.getHeight();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =  $this_1.series[j].getPoints();
                var length =  points.get("length");

                for (var i =  0;  i < length;  i++) {
                    var y =  points.get($p.str(i) + ".y") - marginTop;
                    y = canvasHeight - y + marginTop;
                    points.put($p.str(i) + ".y", y);
                }

                $this_1.series[j].setPoints(points);
            }
        }
        $p.addMethod($this_1, 'invertY', invertY$0);
        function getValueByCursor$2(mouseX, mouseY) {
            return false;
        }
        $p.addMethod($this_1, 'getValueByCursor', getValueByCursor$2);
        function getTooltip$2(mouseX, mouseY) {
            var pointX =  0,pointY =  0;
            var text =  new String();

            var zoomCoeficient =  Graph.zoomCoeficient;

            var xMax =  Graph.layout.getX() + Graph.layout.getWidth();
            var xMin =  Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if (!$this_1.series[j].getVisible()) {
                    continue;
                }

                var points =   ($this_1.series[j].getPoints()).clone();

                var size =  points.get("length");

                for (var i =  0;  i < size;  i++) {
                    var x1 =  points.get($p.str(i) + ".x") - Graph.layout.getX();
                    x1 *= zoomCoeficient;
                    x1 += Graph.layout.getX();
                    x1 -= Graph.currentPosition;
                    points.put($p.str(i) + ".x", x1);
                }

                for (var i =  0;  i < size - 1;  i++) {
                    var x1 =  points.get($p.str(i) + ".x");
                    var y1 =  points.get($p.str(i) + ".y");

                    var x0 =  i > 0 ? points.get($p.str(i - 1) + ".x") : x1;
                    var y0 =  i > 0 ? points.get($p.str(i - 1) + ".y") : y1;

                    var x2 =  points.get($p.str(i + 1) + ".x");
                    var y2 =  points.get($p.str(i + 1) + ".y");

                    var x3 =  i < size - 2 ? points.get($p.str(i + 2) + ".x") : x2;
                    var y3 =  i < size - 2 ? points.get($p.str(i + 2) + ".y") : y2;

                    var controlPoints =  $this_1.$self.getControlPoints(new Point(x0, y0), new Point(x1, y1), new Point(x2, y2), new Point(x3, y3), $this_1.smooth_value);

                    var p1 =  new Point(x1, y1);
                    var p2 =  controlPoints.get(0);
                    var p3 =  controlPoints.get(1);
                    var p4 =  new Point(x2, y2);

                    var steps =  20;

                    for (var k =  0;  k < steps;  k++) {
                        var x =  $p.bezierPoint(p1.getX(), p2.getX(), p3.getX(), p4.getX(),  k / steps);
                        if (x > xMax) {
                            break;
                        } else if (x < xMin) {
                            continue;
                        }
                        var y =  $p.bezierPoint(p1.getY(), p2.getY(), p3.getY(), p4.getY(),  k / steps);

                        if (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Graph.minDif) {
                            Graph.minDif =  (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2));

                            Graph.activeSeries.setActive(false);

                            Graph.activeSeries = $this_1.series[j];

                            Graph.activeSeries.setActive(true);

                            Graph.activeChart = $this_1.$self;

                            if (Math.abs(x1 - mouseX) <= Math.abs(x2 - mouseX)) {
                                Graph.activeSeries.setActiveValueIndex(i);
                                pointX = x1;
                                pointY = y1;

                                text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i] + ": " + $this_1.series[j].getValues()[i];
                            } else {
                                Graph.activeSeries.setActiveValueIndex(i + 1);
                                pointX = x2;
                                pointY = y2;
                                text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i + 1] + ": " + $this_1.series[j].getValues()[i + 1];
                            }
                        }
                    }
                }
            }

            if (pointX == 0 && pointY == 0) {
                return null;
            } else {
                return new Tooltip(text, pointX, pointY);
            }
        }
        $p.addMethod($this_1, 'getTooltip', getTooltip$2);
        function zoom$1(coeficient) {

        }
        $p.addMethod($this_1, 'zoom', zoom$1);
        function switchActiveValueIndex$2(mouseX, mouseY) {
            var pointX =  0,pointY =  0;
            var text =  new String();

            var minDif =  Graph.layout.getWidth() + Graph.layout.getX();

            for (var j =  0;  j < $this_1.series.length;  j++) {
                if ($this_1.series[j].getActive() && $this_1.series[j].getVisible()) {
                    var points =   ($this_1.series[j].getPoints()).clone();
                    var size =  points.get("length");

                    for (var i =  0;  i < size - 1;  i++) {
                        var x1 =  points.get($p.str(i) + ".x");
                        var y1 =  points.get($p.str(i) + ".y");

                        if (Math.abs(x1 - mouseX) <= minDif) {
                            Graph.activeSeries.setActiveValueIndex(i);
                            pointX = x1;
                            pointY = y1;

                            text = $this_1.series[j].getAttribute("name") + ", " + Graph.labels[i] + ": " + $this_1.series[j].getValues()[i];

                            $this_1.series[j].setActiveValueIndex(i);

                            minDif = Math.abs(x1 - mouseX);
                        }
                    }
                    return new Tooltip(text, pointX, pointY);
                }
            }
            return null;
        }
        $p.addMethod($this_1, 'switchActiveValueIndex', switchActiveValueIndex$2);
        function $constr_2(attributes, series){
            $superCstr();

            $this_1.parameters = attributes; 
            $this_1.series = series;

            $this_1.type = Chart.VERTICAL_CHART;

            if ($this_1.parameters.containsKey("isspline")) {
                if ($p.__equals($this_1.parameters.get("isspline"),"1")) {
                    $this_1.smooth_value =  0.8;
                }
            }
        }

        function $constr() {
            if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    $p.extendStaticMembers(LineChart, Chart);
    $p.extendInterfaceMembers(LineChart, Zoomable);
    LineChart.$base = Chart;
    LineChart.$interfaces = [Zoomable];
    return LineChart;
})();
$p.LineChart = LineChart;
var PieChart = (function() {
    function PieChart() {
        var $this_1 = this;
        var $super = {
            $upcast: $this_1
        };
        function $superCstr(){
            Chart.apply($super,arguments);
            if(!('$self' in $super)) $p.extendClassChain($super)
                }
        $this_1.labels = null;
        function draw$2(frame, framesCount) {
            $this_1.$self.drawLabels();

            $p.stroke(255);
            $p.strokeWeight(2);

            var points =  $this_1.series[0].getPoints();
            var length =  points.get("length");

            var x =  $p.parseFloat($this_1.parameters.get("chart.position.x"));
            var y =  $p.parseFloat($this_1.parameters.get("chart.position.y"));
            var diameter =  $p.parseFloat($this_1.parameters.get("chart.diameter"));
            for (var i =  0;  i < length;  i++) {
                $p.fill(Graph.theme.getColorR(i), Graph.theme.getColorG(i), Graph.theme.getColorB(i));

                var startAngle =  points.get($p.str(i) + ".angle.start") / framesCount * frame;
                var finishAngle =  points.get($p.str(i) + ".angle.finish") / framesCount * frame;
                var middleAngle =  (startAngle + finishAngle) / 2;

                if (i == $this_1.series[0].getActiveValueIndex()) {
                    $p.arc(x + 20 * $p.cos(middleAngle), y + 20 * $p.sin(middleAngle), diameter,
                        diameter, startAngle, finishAngle);
                    $p.line(x + 20 * $p.cos(middleAngle), y + 20 * $p.sin(middleAngle),
                        x + 20 * $p.cos(middleAngle) + diameter / 2 * $p.cos(startAngle),
                        y + 20 * $p.sin(middleAngle) + diameter / 2 * $p.sin(startAngle));
                    $p.line(x + 20 * $p.cos(middleAngle), y + 20 * $p.sin(middleAngle),
                        x + 20 * $p.cos(middleAngle) + diameter / 2 * $p.cos(finishAngle),
                        y + 20 * $p.sin(middleAngle) + diameter / 2 * $p.sin(finishAngle));
                } else {
                    $p.arc(x, y, diameter, diameter, startAngle, finishAngle);
                    $p.line(x, y, x + diameter / 2 * $p.cos(startAngle), y + diameter / 2 * $p.sin(startAngle));
                    $p.line(x, y, x + diameter / 2 * $p.cos(finishAngle), y + diameter / 2 * $p.sin(finishAngle));
                }
            }
        }
        $p.addMethod($this_1, 'draw', draw$2);
        function preprocessing$1(layoutParameters) {
            var canvasWidth =  Graph.layout.getWidth();
            var canvasHeight =  Graph.layout.getHeight();

            var x =  Graph.layout.getX();
            var y =  Graph.layout.getY();

            x += canvasWidth / 2;
            y += canvasHeight / 2;

            var LabelsAndLines =  80;

            canvasWidth -=  canvasWidth / 10 > LabelsAndLines ?  canvasWidth / 10 : LabelsAndLines;
            canvasHeight -=  canvasHeight / 10 > LabelsAndLines ?  canvasHeight / 10 : LabelsAndLines;
            var diameter =  canvasWidth > canvasHeight ? canvasHeight : canvasWidth;

            $this_1.parameters.put("chart.position.x", $p.str(x));
            $this_1.parameters.put("chart.position.y", $p.str(y));
            $this_1.parameters.put("chart.diameter", $p.str(diameter));

            var values =  $this_1.series[$this_1.series.length - 1].getValues();

            var valuesSum =  0;
            for (var i =  0;  i < values.length;  i++) {
                valuesSum += values[i];
            }

            var points =  new $p.HashMap();

            var sum =  0;
            for (var i =  0;  i < values.length;  i++) {
                var value =  $p.map(values[i], 0, valuesSum, 0, 2 * $p.PI);

                points.put($p.str(i) + ".angle.start", sum);
                points.put($p.str(i) + ".angle.finish", sum + value);

                sum += value;
            }
            points.put("length",  values.length);
            $this_1.series[0].setPoints(points);
        }
        $p.addMethod($this_1, 'preprocessing', preprocessing$1);
        function invertY$0() {

        }
        $p.addMethod($this_1, 'invertY', invertY$0);
        function getValueByCursor$2(mouseX, mouseY) {
            return false;
        }
        $p.addMethod($this_1, 'getValueByCursor', getValueByCursor$2);
        function drawLabels$0() {
            $p.pushStyle();

            $p.textSize(Graph.theme.get("piechart.labels.textsize"));

            $p.stroke(0);
            $p.strokeWeight(1);

            var x =  $p.parseFloat($this_1.parameters.get("chart.position.x"));
            var y =  $p.parseFloat($this_1.parameters.get("chart.position.y"));
            var diameter =  $p.parseFloat($this_1.parameters.get("chart.diameter"));
            var radius =  diameter / 2;
            var lineWidth =  radius + 30;

            var points =  $this_1.series[0].getPoints();
            var length =  points.get("length");

            var values =  $this_1.series[$this_1.series.length - 1].getValues();

            for (var i =  0;  i < length;  i++) {
                var startAngle =  points.get($p.str(i) + ".angle.start");
                var finishAngle =  points.get($p.str(i) + ".angle.finish");

                var middleAngle =  (startAngle + finishAngle) / 2;

                $p.line(x + radius * $p.cos(middleAngle), y + radius * $p.sin(middleAngle), x + lineWidth * $p.cos(middleAngle), y + lineWidth * $p.sin(middleAngle));

                var labelX =  x + lineWidth * $p.cos(middleAngle);
                var labelY =  y + lineWidth * $p.sin(middleAngle);

                if ($p.PI/2 < middleAngle && middleAngle < 3 * $p.PI / 2) {
                    $p.line(labelX, labelY, labelX = labelX - 10, labelY);
                    $p.textAlign($p.RIGHT);
                    $p.text($this_1.labels[i], labelX - 5, labelY + 5);
                } else {
                    $p.line(labelX, labelY, labelX = labelX + 10, labelY);
                    $p.textAlign($p.LEFT);
                    $p.text($this_1.labels[i], labelX + 5, labelY + 5);
                }
            }

            $p.popStyle();
        }
        $p.addMethod($this_1, 'drawLabels', drawLabels$0);
        function getTooltip$2(mouseX, mouseY) {
            var points =  $this_1.series[0].getPoints();
            var length =  points.get("length");

            var x =  $p.parseFloat($this_1.parameters.get("chart.position.x"));
            var y =  $p.parseFloat($this_1.parameters.get("chart.position.y"));

            var diameter =  $p.parseFloat($this_1.parameters.get("chart.diameter"));

            for (var i =  0;  i < length;  i++) {
                x = $p.parseFloat($this_1.parameters.get("chart.position.x"));
                y = $p.parseFloat($this_1.parameters.get("chart.position.y"));

                var startAngle =  points.get($p.str(i) + ".angle.start");
                var finishAngle =  points.get($p.str(i) + ".angle.finish");

                var middleAngle =  (startAngle + finishAngle) / 2;

                if ($this_1.series[0].getActiveValueIndex() == i) {
                    x += 20 * $p.cos(middleAngle);
                    y += 20 * $p.sin(middleAngle);
                }

                if (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) > (diameter * diameter / 4)) {
                    continue;
                }

                var p1 =  new Point(x, y);
                var p2 =  new Point(mouseX, mouseY);
                var p3 =  new Point(p1.getX() + (diameter / 2), p1.getY());

                var a =   Math.pow(Math.pow(p3.getX() - p1.getX(), 2) + Math.pow(p3.getY() - p1.getY(), 2), 0.5);
                var b =   Math.pow(Math.pow(p3.getX() - p2.getX(), 2) + Math.pow(p3.getY() - p2.getY(), 2), 0.5);
                var c =   Math.pow(Math.pow(p2.getX() - p1.getX(), 2) + Math.pow(p2.getY() - p1.getY(), 2), 0.5);

                var alpha =   Math.acos((a * a + c * c - b * b) / (2 * a * c));

                if (mouseY < y) {
                    alpha = (2 * $p.PI) - alpha;
                }

                if (startAngle < alpha && alpha <= finishAngle) {
                    var dX =  x + (diameter / 4);
                    var dY =  y;

                    dX = x +  ((diameter / 4) * Math.cos(middleAngle));
                    dY = y +  ((diameter / 4) * Math.sin(middleAngle));

                    return new Tooltip($p.str($this_1.series[0].getValues()[i]), dX, dY);
                }
            }

            return null;
        }
        $p.addMethod($this_1, 'getTooltip', getTooltip$2);
        function slice$2(mouseX, mouseY) {
            var points =  $this_1.series[0].getPoints();
            var length =  points.get("length");

            var x =  $p.parseFloat($this_1.parameters.get("chart.position.x"));
            var y =  $p.parseFloat($this_1.parameters.get("chart.position.y"));
            var diameter =  $p.parseFloat($this_1.parameters.get("chart.diameter"));

            for (var i =  0;  i < length;  i++) {
                x = $p.parseFloat($this_1.parameters.get("chart.position.x"));
                y = $p.parseFloat($this_1.parameters.get("chart.position.y"));

                var startAngle =  points.get($p.str(i) + ".angle.start");
                var finishAngle =  points.get($p.str(i) + ".angle.finish");

                var middleAngle =  (startAngle + finishAngle) / 2;

                if ($this_1.series[0].getActiveValueIndex() == i) {
                    x += 20 * $p.cos(middleAngle);
                    y += 20 * $p.sin(middleAngle);
                }

                if (Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) > (diameter * diameter / 4)) {
                    continue;
                }

                var p1 =  new Point(x, y);
                var p2 =  new Point(mouseX, mouseY);
                var p3 =  new Point(p1.getX() + (diameter / 2), p1.getY());

                var a =   Math.pow(Math.pow(p3.getX() - p1.getX(), 2) + Math.pow(p3.getY() - p1.getY(), 2), 0.5);
                var b =   Math.pow(Math.pow(p3.getX() - p2.getX(), 2) + Math.pow(p3.getY() - p2.getY(), 2), 0.5);
                var c =   Math.pow(Math.pow(p2.getX() - p1.getX(), 2) + Math.pow(p2.getY() - p1.getY(), 2), 0.5);

                var alpha =   Math.acos((a * a + c * c - b * b) / (2 * a * c));

                if (mouseY < y) {
                    alpha = (2 * $p.PI) - alpha;
                }

                if (startAngle < alpha && alpha <= finishAngle) {
                    if ($this_1.series[0].getActiveValueIndex() == i) {
                        $this_1.series[0].setActiveValueIndex(Number.MAX_VALUE);
                    } else {
                        $this_1.series[0].setActiveValueIndex(i);
                    }
                    return;
                }
            }
        }
        $p.addMethod($this_1, 'slice', slice$2);
        function $constr_3(attributes, series, labels){
            $superCstr();

            $this_1.parameters = attributes; 
            $this_1.series = series;
            $this_1.labels = labels;

            $this_1.type = Chart.RADIAL_CHART;
        }

        function $constr() {
            if(arguments.length === 3) {
                $constr_3.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    $p.extendStaticMembers(PieChart, Chart);
    PieChart.$base = Chart;
    return PieChart;
})();
$p.PieChart = PieChart;
var Point = (function() {
    function Point() {
        var $this_1 = this;
        function $superCstr(){
            $p.extendClassChain($this_1)
            }
        $this_1.x = 0;
        $this_1.y = 0;
        function getX$0() {
            return $this_1.x;
        }
        $p.addMethod($this_1, 'getX', getX$0);
        function setX$1(x) {
            $this_1.x = x;
        }
        $p.addMethod($this_1, 'setX', setX$1);
        function getY$0() {
            return $this_1.y;
        }
        $p.addMethod($this_1, 'getY', getY$0);
        function setY$1(y) {
            $this_1.y = y;
        }
        $p.addMethod($this_1, 'setY', setY$1);
        function $constr_2(x, y){
            $superCstr();

            $this_1.x = x;
            $this_1.y = y;
        }

        function $constr() {
            if(arguments.length === 2) {
                $constr_2.apply($this_1, arguments);
            } else $superCstr();
        }
        $constr.apply(null, arguments);
    }
    return Point;
})();
$p.Point = Point;

};